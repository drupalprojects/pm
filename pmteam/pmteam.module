<?php

/**
 * @file
 * Functionality for the Project Management Team module
 * Organized into the following sections:
 * - General hooks: (help), menu, perm, theme, views_api
 * - Node specific hooks: node_info, field_extra_fields, access,
 *     form, load, view, _beforesave, insert, update,
 *     delete, nodeapi
 */

/**
 * Implements hook_node_info().
 */
function pmteam_node_info() {
  return array(
    'pmteam' => array(
      'name' => t('Team'),
      'base' => 'pmteam',
      'description' => t('A team for use within Project Management.'),
      'title_label' => t('Team Name'),
      'body_label' => t('Description'),
    )
  );
}

/**
 * Implements hook_permission().
 */
function pmteam_permission() {
  $name = 'Project Management Team';
  return array(
    "Project Management Team: access" => array(
        'title' => t('Access %type_name.', array('%type_name' => $name)),
        'description' => t('Allows the user to see pages and blocks associated with the %type_name, but does not control specific item that is shown within them.', array('%type_name' => $name)),
      ),
  );
}

/**
 * Implements hook_node_access().
 */
function pmteam_node_access($node, $op, $account = NULL) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == 'pmteam') {
    // If no account is specified, assume that the check is against the current logged in user
    if (is_null($account)) {
      global $user;
      $account = $user;
    }
    if ($op == 'create' AND user_access('Project Management Team: add', $account)) {
      return NODE_ACCESS_ALLOW;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_views_api().
 */
function pmteam_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'pmteam'),
  );
}

/**
 * Implements hook_form().
 *
 * Drupal needs for us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/pmteam.
 */
function pmteam_form($node, &$form_state) {
  $breadcrumb = array(
    l(t('Project Management'), 'pm'),
    l(t('Teams'), 'pm/teams'),
  );
  drupal_set_breadcrumb($breadcrumb);
  return node_content_form($node, $form_state);
}


/**
 * Implements hook_view().
 */
function pmteam_view($node, $view_mode) {
  if ($view_mode == 'full' && node_is_page($node)) {
    $breadcrumb = array(
      l(t('Project Management'), 'pm'),
      l(t('Teams'), 'pm/teams'),
    );
    drupal_set_breadcrumb($breadcrumb);
  }
  return $node;
}

/**
 * Returns whether user is in a PM Team based on team $node and user $account
 */
function pmteam_user_belongs_to_team($team, $person_or_organization_nid) {
  $node = node_load($team);

  // Check for person_or_organization_nid in the team members array and return TRUE / FALSE
  if (is_array($node->members_array)) {
    return array_key_exists($person_or_organization_nid, $node->members_array);
  }
  else {
    return FALSE;
  }
}

/**
 * Function to return the teams that a user is a member of
 */
function pmteam_user_return_teams($account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  // Get the list of team nodes. Include organizations which the person is a member of.
  $s = "SELECT ste.nid FROM {pmteam} ste JOIN {pmperson} stp ON (stp.nid = ste.mnid OR stp.organization_nid = ste.mnid) WHERE stp.user_uid = %d";
  $r = db_query($s, $account->uid);
  $teams = array();
  while ($team = db_fetch_object($r)) {
    $teams[] = $team->nid;
  }

  return $teams;
}

/**
 * Implements hook_pm_dashboard_links().
 */
function pmteam_pm_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'pm_dashboard_link',
      'title' => t('Teams'),
      'icon' => 'pmteams',
      'path' => 'pm/teams',
      'params' => array(),
      'node_type' => 'pmteam',
      'add_type' => 'pmteam',
      'map' => array(),
      'weight' => 3,
    );
  }
  return $links;
}
