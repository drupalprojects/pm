<?php

/**
 * @file
 * Functionality for the Project Management Team module
 * Organized into the following sections:
 * - General hooks: (help), menu, perm, theme, views_api
 * - Node specific hooks: node_info, field_extra_fields, access, access_sql,
 *     pm_rewrite_where_sql, form, load, view, _beforesave, insert, update,
 *     delete, nodeapi
 */

/**
 * @function
 * Implementation of hook_permission().
 */
function pmteam_permission() {
  return array(
    'Project Management Team: access' => array(
      'title' => t('Access Project Management Team lists'),
    ),
    'Project Management Team: add' => array(
      'title' => t('Add Project Management Teams'),
    ),
    'Project Management Team: view all' => array(
      'title' => t('View Any Project Management Team'),
    ),
    'Project Management Team: view own' => array(
      'title' => t('View Authored Project Management Team'),
    ),
    'Project Management Team: view belonged' => array(
      'title' => t('View Project Management Team if belonged to'),
    ),
    'Project Management Team: edit all' => array(
      'title' => t('Edit Any Project Management Team'),
    ),
    'Project Management Team: edit own' => array(
      'title' => t('Edit Authored Project Management Team'),
    ),
    'Project Management Team: edit belonged' => array(
      'title' => t('Edit Project Management Team if belonged to'),
    ),
    'Project Management Team: delete all' => array(
      'title' => t('Edit Any Project Management Team'),
    ),
    'Project Management Team: delete own' => array(
      'title' => t('Delete Authored Project Management Team'),
    ),
    'Project Management Team: delete belonged' => array(
      'title' => t('Delete Project Management Team if belonged to'),
    ),
  );
}

/**
 * @function
 * Implementation of hook_theme().
 */
function pmteam_theme() {
  return array(
    'pmteam_view' => array(
      'file'      => 'pmteam.theme.inc',
      'variables' => array('node', 'view_mode'),
    ),
  );
}

/**
 * @function
 * Implementation of hook_views_api().
 */
function pmteam_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'pmteam'),
  );
}

/**
 * @function
 * Implementation of hook_node_info().
 */
function pmteam_node_info() {
  return array(
    'pmteam' => array(
      'name' => t('Team'),
      'base' => 'pmteam',
      'description' => t('A team for use within Project Management.'),
      'title_label' => t('Team Name'),
      'body_label' => t('Description'),
    )
  );
}

/**
 * @function
 * Implementation of hook_content_extra_fields().
 */
function pmteam_field_extra_fields() {
  $extra['node']['pmteam'] = array(
    'form' => array(
      'group1' => array(
        'label' => 'Team members',
        'weight' => -20,
      ),
    ),
  );
  return $extra;
}

/**
 * @function
 * Implementation of hook_field_extra_fields().
 */
function pmteam_field_extra_fields_alter(&$info) {
  $info['node']['pmteam']['form']['title']['weight'] = -21;
}

function pmteam_node_access($node, $op, $account = NULL) {
  return NODE_ACCESS_IGNORE;
}

/**
 * @function
 * Implementation of hook_access().
 */
function pmteam_access($op, $node, $account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  if (is_numeric($node)) $node = node_load($node);

  switch ($op) {
    case 'create':
      return user_access('Project Management Team: add');
    case 'view':
      if (user_access('Project Management Team: view all')) {
        return TRUE;
      }
      elseif (user_access('Project Management Team: view own') && ($account->uid == $node->uid)) {
        return TRUE;
      }
      elseif (user_access('Project Management Team: view belonged') && pmteam_user_belongs_to_team($node->nid, $account->pmperson_nid)) {
        return TRUE;
      }
      elseif (user_access('Project Management Team: view belonged') && pmteam_user_belongs_to_team($node->nid, $account->pmorganization_nid)) {
        return TRUE;
      }
      break;
    case 'update':
      if (user_access('Project Management Team: edit all')) {
        return TRUE;
      }
      elseif (user_access('Project Management Team: edit own') && ($account->uid == $node->uid)) {
        return TRUE;
      }
      elseif (user_access('Project Management Team: edit belonged') && pmteam_user_belongs_to_team($node->nid, $account->pmperson_nid)) {
        return TRUE;
      }
      elseif (user_access('Project Management Team: edit belonged') && pmteam_user_belongs_to_team($node->nid, $account->pmorganization_nid)) {
        return TRUE;
      }
      break;
    case 'delete':
      if (user_access('Project Management Team: delete all')) {
        return TRUE;
      }
      elseif (user_access('Project Management Team: delete own') && ($account->uid == $node->uid)) {
        return TRUE;
      }
      elseif (user_access('Project Management Team: delete belonged') && pmteam_user_belongs_to_team($node->nid, $account->pmperson_nid)) {
        return TRUE;
      }
      elseif (user_access('Project Management Team: delete belonged') && pmteam_user_belongs_to_team($node->nid, $account->pmorganization_nid)) {
        return TRUE;
      }
      break;
  }
  return FALSE;
}

/**
 * @function
 * Function to add node access rules onto database queries
 */
function pmteam_access_sql($sql, $where = array()) {
  if (user_access('Project Management Team: view all')) {
    $where[] = "'pm_access'='pm_access'";
    return pm_rewrite_sql($sql, $where);
  }

  global $user;

  $cond = '';
  if (user_access('Project Management Team: view own')) {
    $cond .= 'n.uid='. $user->uid;
  }
  if (user_access('Project Management Team: view belonged')) {
    if (!empty($cond)) $cond .= ' OR ';
    $cond .= "ste.mnid =  ". $user->pmperson_nid;
  }
  if (empty($cond)) $cond = '0=1';
  $where[] = $cond;

  $where[] = "'pm_access'='pm_access'";
  return pm_rewrite_sql($sql, $where);
}

/**
 * @function
 * Implementation of hook_pm_rewrite_where_sql().
 */
function pmteam_pm_rewrite_where_sql($query, $primary_table, $account) {
  static $conds = array();

  if (isset($conds[$primary_table][$account->uid])) {
    return $conds[$primary_table][$account->uid];
  }

  if (preg_match("/'pm_access'='pm_access'/", $query)) {
    $cond = '';
  }
  else {
    if (user_access('Project Management Team: view all', $account)) {
      return '';
    }

    $cond = '';
    if (user_access('Project Management Team: view own', $account)) {
      $cond .= " ${primary_table}.uid=". $account->uid;

    }
    if (user_access('Project Management Team: view belonged', $account)) {
      if ($cond) {
        $cond .= ' OR ';
      }
      $cond .= "ste1.mnid = ". $account->pmperson_nid;
    }
    if ($cond) {
      $cond = " WHEN 'pmteam' THEN (SELECT DISTINCT 1 FROM {pmteam} ste1 WHERE ste1.vid=${primary_table}.vid AND ($cond)) ";
    }
    else {
      $cond = " WHEN 'pmteam' THEN 0 ";
    }
  }

  $conds[$primary_table][$account->uid] = $cond;
  return $cond;
}

/**
 * @function
 * Implementation of hook_form().
 */
function pmteam_form(&$node) {
  $breadcrumb = array(
    l(t('Project Management'), 'pm'),
    l(t('Teams'), 'pm/teams'),
  );
  drupal_set_breadcrumb($breadcrumb);

  $type = node_type_get_type($node);
  $info = field_info_extra_fields('node', 'pmteam', 'form');

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => $info['title']['weight'],
  );

  $form['group1'] = array(
    '#type' => 'markup',
    '#weight' => $info['group1']['weight'],
  );

  $options = array(0 => '-');

  $per_query = db_select('node', 'n');
  $per_query->join('pmperson', 'spe', 'n.vid = spe.vid');
  $per_result = $per_query
    ->fields('n', array('nid', 'title'))
    ->condition('n.type', 'pmperson')
    ->condition('n.status', 1)
    ->orderBy('n.title', 'ASC')
    ->execute();

//  $s_per = pmperson_access_sql($s_per);
//  $s_per = db_rewrite_sql($s_per);
  $people = array();
  foreach ($per_result as $person) {
    $people[$person->nid] = $person->title;
  }

  $options = $options + array(-1 => t('-PEOPLE-')) + $people;

  $org_result = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('n.type', 'pmorganization')
    ->condition('n.status', 1)
    ->orderBy('n.title', 'ASC')
    ->execute();

//  $s_org = pmorganization_access_sql($s_org);
//  $s_org = db_rewrite_sql($s_org);
  $organizations = array();
  foreach ($org_result as $organization) {
    $organizations[$organization->nid] = $organization->title;
  }

  $options = $options + array(-2 => t('-ORGANIZATIONS-')) + $organizations;

  $i = 1;
  $variable = 'members_array_'. $i;

  // Add rows for existing team members
  if (isset($node->members_array) && is_array($node->members_array)) {
    foreach ($node->members_array as $node->$variable => $name) {
      $form['group1'][$variable] = array(
        '#type' => 'select',
        '#title' => t('Team Member @num', array('@num' => $i)),
        '#options' => $options,
        '#default_value' => $node->$variable,
      );
      $i++;
      $variable = 'members_array_'. $i;
    }
  }

  // Add placeholder rows
  for ($j = 0; $j < 3; $j++) {
    $variable = 'members_array_'. $i;
    $form['group1'][$variable] = array(
      '#type' => 'select',
      '#title' => t('Team Member @num', array('@num' => $i)),
      '#options' => $options,
      '#default_value' => (isset($node->$variable)) ? $node->$variable : NULL,
    );
    $i++;
  }

  $body = field_get_items('pmteam',$node,'body');
  if($body) {
    $form['body_field'] = $body;
  }

  $form['title_old'] = array(
    '#type' => 'hidden',
    '#default_value' => (isset($node->title_old)) ? $node->title_old : NULL,
  );

  return $form;
}

/**
 * @function
 * Implementation of hook_load().
 */
function pmteam_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    $team_query = db_select('node', 'n');
    $team_query->join('pmteam', 'ste', 'n.nid = ste.mnid');
    $team_result = $team_query
      ->fields('n', array('title', 'status'))
      ->fields('ste', array('mnid'))
      ->condition('ste.vid', $node->vid)
      ->execute();

    $node->members_array = array();
    $node->members_deactivated_array = array();
    foreach ($team_result as $members) {
      $node->members_array[$members->mnid] = $members->title;
      if ($members->status == 0) {
        $node->members_deactivated_array[$members->mnid] = $members->title;
      }
    }
    $node->title_old = $node->title;
  }
}

/**
 * @function
 * Implementation of hook_view().
 */
function pmteam_view($node, $view_mode) {
  $breadcrumb = array(
    l(t('Project Management'), 'pm'),
    l(t('Teams'), 'pm/teams'),
  );
  drupal_set_breadcrumb($breadcrumb);

  return theme('pmteam_view', array('node' => $node, 'view_mode' => $view_mode));
}

/**
 * @function
 * Function to be called internally before saving Project Management Team nodes
 */
function _pmteam_beforesave(&$node) {
  $i = 1;
  $variable = 'members_array_'. $i;

  while (isset($node->$variable)) {
    $per_result = db_select('node', 'n')
      ->fields('n', array('title'))
      ->condition('n.nid', $node->$variable)
      ->execute();

    $title = $per_result->fetchObject();
    if (!empty($title)) {
      $node->members_array[$node->$variable] = $title->title;
    }
    $i++;
    $variable = 'members_array_'. $i;
  }
  if (isset($node->members_array)) {
    if (array_key_exists(0, $node->members_array)) {
      unset($node->members_array[0]);
    }

    $node->members = serialize($node->members_array);
  }
}

/**
 * @function
 * Implementation of hook_insert().
 */
function pmteam_insert($node) {
  _pmteam_beforesave($node);
  if (isset($node->vid) && (isset($node->nid)) && (isset($node->members_array))) {
    $member = new stdClass();
    $member->nid = $node->nid;
    $member->vid = $node->vid;
    foreach ($node->members_array as $mnid => $member_name) {
      $member->mnid = $mnid;
      drupal_write_record('pmteam', $member);
    }
  }
}

/**
 * @function
 * Implementation of hook_update().
 */
function pmteam_update($node) {
  _pmteam_beforesave($node);

  if ($node->revision) {
    pmteam_insert($node);
  }
  else {

    if (isset($node->vid) && (isset($node->nid)) && (isset($node->members_array))) {
      // Delete the old members
      db_delete('pmteam')
        ->condition('vid', $node->vid)
        ->execute();

      // Insert entries
      $member = new stdClass();
      $member->nid = $node->nid;
      $member->vid = $node->vid;
      foreach ($node->members_array as $mnid => $member_name) {
        $member->mnid = $mnid;
        drupal_write_record('pmteam', $member);
      }
    }

    // Invokes hook_pmteam_change so that if title has changed, other modules that have cached the title can update it.
    if ($node->title != $node->title_old) {
      module_invoke_all('pmteam_change', $node->nid, $node->title);
    }
  }
}

/**
 * @function
 * Implementation of hook_delete().
 */
function pmteam_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_delete('pmteam')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * @function
 * Implementation of hook_nodeapi().
 */
function pmteam_node_revision_delete($node) {
  // Notice that we're matching a single revision based on the node's vid.
  db_delete('pmorganization')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * @function
 * Function to return an autocomplete list for Project Management Teams
 */
function pmteam_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $s = "SELECT title FROM {node} AS n WHERE n.type='pmteam' AND LOWER(title) LIKE LOWER('%%%s%%')";
    $s = pmteam_access_sql($s);
    $s = db_rewrite_sql($s);

    $result = db_query_range($s, $string, 0, 10);
    while ($team = db_fetch_object($result)) {
      $matches[$team->title] = check_plain($team->title);
    }
  }

  drupal_json($matches);
}

/**
 * @function
 * Function to return an autocomplete list for Project Management Teams and People
 */
function pmteam_autocomplete_combo($string = '') {
  $matches = array();
  if ($string) {
    // TO BE COMPLETED
    $s = "SELECT title FROM {node} AS n WHERE n.type='pmteam' AND LOWER(title) LIKE LOWER('%s%%')";
    $s = pmteam_access_sql($s);
    $s = db_rewrite_sql($s);

    $result = db_query_range($s, $string, 0, 10);
    while ($obj = db_fetch_object($result)) {
      $matches[$obj->title] = check_plain($obj->title);
    }
  }

  drupal_json($matches);
}

/**
 * @function
 * Returns whether user is in a Project Management Team based on team $node and user $account
 */
function pmteam_user_belongs_to_team($team, $person_or_organization_nid) {
  $node = node_load($team);

  // Check for person_or_organization_nid in the team members array and return TRUE / FALSE
  if (is_array($node->members_array)) {
    return array_key_exists($person_or_organization_nid, $node->members_array);
  }
  else {
    return FALSE;
  }
}

/**
 * @function
 * Function to return the teams that a user is a member of
 */
function pmteam_user_return_teams($account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  // Get the list of team nodes. Include organizations which the person is a member of.
  $s = "SELECT ste.nid FROM {pmteam} ste JOIN {pmperson} stp ON (stp.nid = ste.mnid OR stp.organization_nid = ste.mnid) WHERE stp.user_uid = %d";
  $r = db_query($s, $account->uid);
  $teams = array();
  while ($team = db_fetch_object($r)) {
    $teams[] = $team->nid;
  }

  return $teams;
}

function pmteam_pm_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'pm_dashboard_link',
      'title' => t('Teams'),
      'icon' => 'pmteams',
      'path' => 'pm/teams',
      'params' => array(),
      'access_arguments' => 'Project Management Team: access',
      'node_type' => 'pmteam',
      'add_type' => 'pmteam',
      'map' => array(),
      'weight' => 3,
    );
  }
  return $links;
}
