<?php

/**
 * @file
 * Functionality for the Project Management Team module
 * Organized into the following sections:
 * - General hooks: (help), menu, perm, theme, views_api
 * - Node specific hooks: node_info, field_extra_fields, access,
 *     form, load, view, _beforesave, insert, update,
 *     delete, nodeapi
 */

/**
 * Implements hook_permission().
 */
function pmteam_permission() {
  return array(
    'Project Management Team: access' => array(
      'title' => t('Access PM Team'),
      'description' => t('Allows the user to see pages and blocks associated with the PM Team module, but does not control which teams are shown within them.'),
    ),
    'Project Management Team: add' => array(
      'title' => t('Add PM Team'),
      'description' => t('Allows the user to create a team.'),
    ),
    'Project Management Team: view all' => array(
      'title' => t('View Any PM Team'),
      'description' => t('Allows the user to view any team and see any team in lists or dropdowns elsewhere on the site.'),
    ),
    'Project Management Team: view own' => array(
      'title' => t('View Authored PM Team'),
      'description' => t('For teams authored by the user, allows the user to view the team and see the team in lists or dropdowns elsewhere on the site.'),
    ),
    'Project Management Team: view belonged' => array(
      'title' => t('View Belonged PM Team'),
      'description' => t('Allows users assigned to a PM Person linked to a team to view that team and see that team in lists or dropdowns elsewhere on the site.'),
    ),
    'Project Management Team: edit all' => array(
      'title' => t('Edit Any PM Team'),
      'description' => t('Allows the user to edit any team.'),
    ),
    'Project Management Team: edit own' => array(
      'title' => t('Edit Authored PM Team'),
      'description' => t('For teams authored by the user, allows the user to edit the team.'),
    ),
    'Project Management Team: edit belonged' => array(
      'title' => t('Edit Belonged PM Team'),
      'description' => t('Allows users assigned to a PM Person linked to an organization to edit that team.'),
    ),
    'Project Management Team: delete all' => array(
      'title' => t('Edit Any PM Team'),
      'description' => t('Allows the user to delete any team.'),
    ),
    'Project Management Team: delete own' => array(
      'title' => t('Delete Authored PM Team'),
      'description' => t('For teams authored by the user, allows the user to delete the team.'),
    ),
    'Project Management Team: delete belonged' => array(
      'title' => t('Delete Belonged PM Team'),
      'description' => t('Allows users assigned to a PM Person linked to an organization to delete that team.'),
    ),
  );
}


/**
 * Implements hook_node_info().
 */
function pmteam_node_info() {
  return array(
    'pmteam' => array(
      'name' => t('Team'),
      'base' => 'pmteam',
      'description' => t('A team for use within Project Management.'),
      'title_label' => t('Team Name'),
      'body_label' => t('Description'),
    )
  );
}

/**
 * Implements hook_node_access().
 */
function pmteam_node_access($node, $op, $account = NULL) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == 'pmteam') {
    // If no account is specified, assume that the check is against the current logged in user
    if (is_null($account)) {
      global $user;
      $account = $user;
    }
    if ($op == 'create' AND user_access('Project Management Team: add', $account)) {
      return NODE_ACCESS_ALLOW;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_form().
 *
 * Drupal needs for us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/pmteam.
 */
function pmteam_form($node, &$form_state) {
  $breadcrumb = array(
    l(t('Project Management'), 'pm'),
    l(t('Teams'), 'pm/teams'),
  );
  drupal_set_breadcrumb($breadcrumb);
  return node_content_form($node, $form_state);
}


/**
 * Implements hook_view().
 */
function pmteam_view($node, $view_mode) {
  if ($view_mode == 'full' && node_is_page($node)) {
    $breadcrumb = array(
      l(t('Project Management'), 'pm'),
      l(t('Teams'), 'pm/teams'),
    );
    drupal_set_breadcrumb($breadcrumb);
  }
  return $node;
}

/**
 * Returns whether user is in a PM Team based on team $node and user $account
 */
function pmteam_user_belongs_to_team($team, $person_or_organization_nid) {
  $node = node_load($team);

  // Check for person_or_organization_nid in the team members array and return TRUE / FALSE
  if (is_array($node->members_array)) {
    return array_key_exists($person_or_organization_nid, $node->members_array);
  }
  else {
    return FALSE;
  }
}

/**
 * Function to return the teams that a user is a member of
 */
function pmteam_user_return_teams($account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  // Get the list of team nodes. Include organizations which the person is a member of.
  $s = "SELECT ste.nid FROM {pmteam} ste JOIN {pmperson} stp ON (stp.nid = ste.mnid OR stp.organization_nid = ste.mnid) WHERE stp.user_uid = %d";
  $r = db_query($s, $account->uid);
  $teams = array();
  while ($team = db_fetch_object($r)) {
    $teams[] = $team->nid;
  }

  return $teams;
}

/**
 * Implements hook_node_access_records().
 */
function pmteam_node_access_records($node) {
  if (empty($node->status)) {
    // Lets Drupal take care of permission to unpublished nodes.
    return array();
  }
  $type = is_string($node) ? $node : $node->type;
  $grants = array();
  if ($type == 'pmteam') {
    // Project Management Team: view all
    $grants[] = array(
      'realm' => 'pmteam_view_all',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Team: view own
    $grants[] = array(
      'realm' => 'pmteam_view_own',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Team: view belonged
    $grants[] = array(
      'realm' => 'pmteam_view_if_belonged',
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Team: edit all
    $grants[] = array(
      'realm' => 'pmteam_update_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Team: edit own
    $grants[] = array(
      'realm' => 'pmteam_update_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Team: edit belonged
    $grants[] = array(
      'realm' => 'pmteam_update_if_belonged',
      'gid' => $node->nid,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Team: delete all
    $grants[] = array(
      'realm' => 'pmteam_delete_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'priority' => 0,
    );
    // Project Management Team: delete own
    $grants[] = array(
      'realm' => 'pmteam_delete_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'priority' => 0,
    );
    // Project Management Team: delete belonged
    $grants[] = array(
      'realm' => 'pmteam_delete_if_belonged',
      'gid' => $node->nid,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'priority' => 0,
    );
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function pmteam_node_grants($account, $op) {
  $assigned_nids = array();
  if (module_exists('pmperson')) {
    _pmperson_user_load($account);
    if (!empty($account->pmteam) AND is_array($account->pmteam)) {
      $assigned_nids = $account->pmteam;
    }
  }
  $grants = array();
  switch ($op) {
    case 'view':
      if (user_access('Project Management Team: view all', $account)) {
        $grants['pmteam_view_all'] = array(0);
      }
      if (user_access('Project Management Team: view own', $account)) {
        $grants['pmteam_view_own'] = array($account->uid);
      }
      if (!empty($assigned_nids) AND user_access('Project Management Team: view belonged', $account)) {
        $grants['pmteam_view_if_belonged'] = $assigned_nids;
      }
      break;

    case 'update':
      if (user_access('Project Management Team: edit all', $account)) {
        $grants['pmteam_update_all'] = array(0);
      }
      if (user_access('Project Management Team: edit own', $account)) {
        $grants['pmteam_update_own'] = array($account->uid);
      }
      if (!empty($assigned_nids) AND user_access('Project Management Team: edit belonged', $account)) {
        $grants['pmteam_update_if_belonged'] = $assigned_nids;
      }
      break;

    case 'delete':
      if (user_access('Project Management Team: delete all', $account)) {
        $grants['pmteam_delete_all'] = array(0);
      }
      if (user_access('Project Management Team: delete own', $account)) {
        $grants['pmteam_delete_own'] = array($account->uid);
      }
      if (!empty($assigned_nids) AND user_access('Project Management Team: delete belonged', $account)) {
        $grants['pmteam_delete_if_belonged'] = $assigned_nids;
      }
      break;
  }
  return $grants;
}

/**
 * Implements hook_pm_dashboard_links().
 */
function pmteam_pm_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'pm_dashboard_link',
      'title' => t('Teams'),
      'icon' => 'pmteams',
      'path' => 'pm/teams',
      'params' => array(),
      'node_type' => 'pmteam',
      'add_type' => 'pmteam',
      'map' => array(),
      'weight' => 3,
    );
  }
  return $links;
}
