<?php
/**
 * @file
 */
define('PM_PMPERSON_RESOLVE_DEPENDENCIES_LINK', 'admin/pm/migrate-info/pmperson');


/**
 * Implements hook_menu().
 */
function pmperson_menu() {
  $items[PM_PMPERSON_RESOLVE_DEPENDENCIES_LINK] = array(
    'title' => 'PM Person migrate status',
    'page callback' => 'pmperson_migrate_page_callback',
    'access arguments' => array('administer content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/pmperson.migrate.inc',
  );
  return $items;
}

// @todo Need to consider how to protect user information when not stored as a separate node.
/**
 * Implements hook_permission().
 */
function pmperson_permission() {
  return array(
    'Project Management Person: access' => array(
      'title' => t('Access PM Person'),
      'description' => t('Allows the user to see pages and blocks associated with the PM Person module, but does not control which persons are shown within them.'),
    ),
    'Project Management Person: add' => array(
      'title' => t('Add PM Person'),
      'description' => t('Allows the user to create a person.'),
    ),
    'Project Management Person: delete all' => array(
      'title' => t('Delete Any PM Person'),
      'description' => t('Allows the user to delete any person.'),
    ),
    'Project Management Person: delete own' => array(
      'title' => t('Delete Authored PM Person'),
      'description' => t('For persons authored by the user, allows the user to delete the person.'),
    ),
    'Project Management Person: delete of user organization' => array(
      'title' => t('Delete PM Persons in own Organization'),
      'description' => t('For persons assigned to the same PM Organization as other PM Persons, allows the user associated with the Person to delete the person.'),
    ),
    'Project Management Person: delete when linked to own user account' => array(
      'title' => t('Delete PM Person linked to own user account'),
      'description' => t('For persons assigned to a user account, allows that assigned user to delete the person'),
    ),
    'Project Management Person: edit all' => array(
      'title' => t('Edit Any PM Person'),
      'description' => t('Allows the user to edit any person.'),
    ),
    'Project Management Person: edit own' => array(
      'title' => t('Edit Authored PM Person'),
      'description' => t('For persons authored by the user, allows the user to edit the person.'),
    ),
    'Project Management Person: edit of user organization' => array(
      'title' => t('Edit PM Persons in own Organization'),
      'description' => t('For persons assigned to the same PM Organization as a Project Management Person, allows the user associated with that Person to edit the person.'),
    ),
    'Project Management Person: edit when linked to own user account' => array(
      'title' => t('Edit PM Person linked to own user account'),
      'description' => t('For persons assigned to a user account, allows that assigned user to edit the person'),
    ),
    'Project Management Person: view all' => array(
      'title' => t('View Any PM Person'),
      'description' => t('Allows the user to view any person and see any person in lists or dropdowns elsewhere on the site.'),
    ),
    'Project Management Person: view own' => array(
      'title' => t('View Authored PM Person'),
      'description' => t('For persons authored by the user, allows the user to view the person and see the person in lists or dropdowns elsewhere on the site.'),
    ),
    'Project Management Person: view of user organization' => array(
      'title' => t('View PM Persons in own Organization'),
      'description' => t('For persons assigned to the same PM Organization as a PM Person, allows the user associated with that Person to view the person and see the person in lists or dropdowns elsewhere on the site.'),
    ),
    'Project Management Person: view when linked to own user account' => array(
      'title' => t('View PM Person linked to own user account'),
      'description' => t('For persons assigned to a user account, allows that assigned user to view the person and see the person in lists or dropdowns elsewhere on the site.'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function pmperson_node_access($node, $op, $account = NULL) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == 'pmperson') {
    // If no account is specified, assume that the check is against the current logged in user
    if (is_null($account)) {
      global $user;
      $account = $user;
    }
    if ($op == 'create' AND user_access('Project Management Person: add', $account)) {
      return NODE_ACCESS_ALLOW;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/*
 * Implements hook_node_access_records().
 */
function pmperson_node_access_records($node) {
  if (empty($node->status)) {
    // Lets Drupal take care of permission on unpublished nodes.
    return array();
  }
  $type = is_string($node) ? $node : $node->type;
  $grants = array();
  if ($type == 'pmperson') {
    // Project Management Person: view all
    $grants[] = array(
      'realm' => 'pmperson_view_all',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Person: view own
    $grants[] = array(
      'realm' => 'pmperson_view_own',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Person: view of user organization
    if ( isset($node->organization_nid) && !empty($node->organization_nid)) {
      $grants[] = array(
        'realm' => 'pmperson_view_if_user_organization',
        'gid' => $node->organization_nid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
    // Project Management Person: view when linked to own user account
    if ( isset($node->user_uid) && !empty($node->user_uid)) {
      $grants[] = array(
        'realm' => 'pmperson_view_linked',
        'gid' => $node->user_uid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }

    // Project Management Person: edit all
    $grants[] = array(
      'realm' => 'pmperson_update_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Person: edit own
    $grants[] = array(
      'realm' => 'pmperson_update_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Person: edit of user organization
    if ( isset($node->organization_nid) && !empty($node->organization_nid)) {
      $grants[] = array(
        'realm' => 'pmperson_update_if_user_organization',
        'gid' => $node->organization_nid,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
    // Project Management Person: edit when linked to own user account
    if ( isset($node->user_uid) && !empty($node->user_uid)) {
      $grants[] = array(
        'realm' => 'pmperson_update_linked',
        'gid' => $node->user_uid,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
    // Project Management Person: delete all
    $grants[] = array(
      'realm' => 'pmperson_delete_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'priority' => 0,
    );
    // Project Management Person: delete own
    $grants[] = array(
      'realm' => 'pmperson_delete_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'priority' => 0,
    );
    // Project Management Person: delete of user organization
    if ( isset($node->organization_nid) && !empty($node->organization_nid)) {
      $grants[] = array(
        'realm' => 'pmperson_delete_if_user_organization',
        'gid' => $node->organization_nid,
        'grant_view' => 0,
        'grant_update' => 0,
        'grant_delete' => 1,
        'priority' => 0,
      );
    }
    // Project Management Person: delete when linked to own user account
    if ( isset($node->user_uid) && !empty($node->user_uid)) {
      $grants[] = array(
        'realm' => 'pmperson_delete_linked',
        'gid' => $node->user_uid,
        'grant_view' => 0,
        'grant_update' => 0,
        'grant_delete' => 1,
        'priority' => 0,
      );
    }
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function pmperson_node_grants($account, $op) {

  if (!isset($account->pmorganization_nid)) {
    _pmperson_user_load($account);
  }
  $grants = array();
  switch ($op) {
    case 'view':
      if (user_access('Project Management Person: view all', $account)) {
        $grants['pmperson_view_all'] = array(0);
      }
      if (user_access('Project Management Person: view own', $account)) {
        $grants['pmperson_view_own'] = array($account->uid);
      }
      if (user_access('Project Management Person: view of user organization', $account)) {
        $grants['pmperson_view_if_user_organization'] = array($account->pmorganization_nid);
      }
      if (user_access('Project Management Person: view when linked to own user account', $account)) {
        $grants['pmperson_view_linked'] = array($account->uid);
      }
      break;

    case 'update':
      if (user_access('Project Management Person: edit all', $account)) {
        $grants['pmperson_update_all'] = array(0);
      }
      if (user_access('Project Management Person: edit own', $account)) {
        $grants['pmperson_update_own'] = array($account->uid);
      }
      if (user_access('Project Management Person: edit of user organization', $account)) {
        $grants['pmperson_update_if_user_organization'] = array($account->pmorganization_nid);
      }
      if (user_access('Project Management Person: edit when linked to own user account', $account)) {
        $grants['pmperson_update_linked'] = array($account->uid);
      }
      break;

    case 'delete':
      if (user_access('Project Management Person: delete all', $account)) {
        $grants['pmperson_delete_all'] = array(0);
      }
      if (user_access('Project Management Person: delete own', $account)) {
        $grants['pmperson_delete_own'] = array($account->uid);
      }
      if (user_access('Project Management Person: delete of user organization', $account)) {
        $grants['pmperson_delete_if_user_organization'] = array($account->pmorganization_nid);
      }
      if (user_access('Project Management Person: delete when linked to own user account', $account)) {
        $grants['pmperson_delete_linked'] = array($account->uid);
      }
      break;
  }
  return $grants;
}

// @todo Do we want to have some sort of list of users with PM Person fields filled out?
/**
 * Implements hook_pm_dashboard_links().
 */
function pmperson_pm_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'pm_dashboard_link',
      'title' => t('People'),
      'icon' => 'pmpeople',
      'path' => 'pm/people',
      'params' => array(),
      'node_type' => 'pmperson',
      'add_type' => 'pmperson',
      'map' => array(),
      'weight' => 2,
    );
  }
  return $links;
}

/**
 * Dummy function to handle errors.
 */
function _pmperson_user_load() {
  drupal_set_message(t('_pmperson_user_load is deprecated. Fix required.'), 'status', FALSE);
}