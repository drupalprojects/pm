<?php
/**
 * @file
 */
define('PMPERSON_RESOLVE_DEPENDENCIES_LINK', 'admin/config/pm/migration/pmperson');


/**
 * Implements hook_menu().
 */
function pmperson_menu() {
  $items[PMPERSON_RESOLVE_DEPENDENCIES_LINK] = array(
    'title' => 'PM Person migrate status',
    'page callback' => 'pmperson_migrate_page_callback',
    'access callback' => 'pmperson_update_access_allowed',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/pmperson.migrate.inc',
  );
  return $items;
}

/**
 * Access check for resolving conflicts.
 * @see update_access_allowed().
 */
function pmperson_update_access_allowed() {
  global $update_free_access, $user;

  // Allow the global variable in settings.php to override the access check.
  if (!empty($update_free_access)) {
    return TRUE;
  }
  // Calls to user_access() might fail during the Drupal 6 to 7 update process,
  // so we fall back on requiring that the user be logged in as user #1.
  try {
    require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'user') . '/user.module';
    return user_access('administer software updates');
  }
  catch (Exception $e) {
    return ($user->uid == 1);
  }
}

/**
 * Implements hook_forms().
 */
function pmperson_forms($form_id, $args) {
  $forms = array();
  if (substr($form_id, 0, 35) == 'pmperson_migrate_email_adjust_form_') {
    $forms[$form_id] = array('callback' => 'pmperson_migrate_email_adjust_form');
  }
  return $forms;
}

// @todo Need to consider how to protect user information when not stored as a separate node.
/**
 * Implements hook_permission().
 */
function pmperson_permission() {
  return array(
    'Project Management Person: access' => array(
      'title' => t('Access PM Person'),
      'description' => t('Allows the user to see pages and blocks associated with the PM Person module, but does not control which persons are shown within them.'),
    ),
    'Project Management Person: view all' => array(
      'title' => t('View Any PM Person'),
      'description' => t('Allows the user to view any person and see any person in lists or dropdowns elsewhere on the site.'),
    ),
    'Project Management Person: view of user organization' => array(
      'title' => t('View PM Persons in own Organization'),
      'description' => t('For persons assigned to the same PM Organization as a PM Person, allows the user associated with that Person to view the person and see the person in lists or dropdowns elsewhere on the site.'),
    ),
  );
}

/**
 * Implements hook_pm_dashboard_links().
 * @todo Need to implement the actual view.
 */
function pmperson_pm_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'pm_dashboard_link',
      'title' => t('People'),
      'icon' => 'pmpeople',
      'path' => 'pm/people',
      'params' => array(),
      'node_type' => 'pmperson',
      'add_type' => 'pmperson',
      'map' => array(),
      'weight' => 2,
    );
  }
  return $links;
}

/**
 * Dummy function to handle errors.
 * // TODO: Remove this function when all other PM submodules have been ported.
 */
function _pmperson_user_load() {

}
