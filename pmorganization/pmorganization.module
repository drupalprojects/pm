<?php
/**
 * @file
 */

/**
 * Implements hook_help().
 */
function pmorganization_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#pmorganization":
      $output = '<p>' . t("Provides organization support for Project Management") . '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_permission().
 */
function pmorganization_permission() {
  return array(
    'Project Management Organization: access' => array(
      'title' => t('Access PM Organization'),
      'description' => t('Allows the user to see pages and blocks associated with the PM Organization module, but does not control which organizations are shown within them.'),
    ),
    'Project Management Organization: add' => array(
      'title' => t('Add PM Organization'),
      'description' => t('Allows the user to create an organization.'),
    ),
    'Project Management Organization: delete all' => array(
      'title' => t('Delete Any PM Organization'),
      'description' => t('Allows the user to delete any organization.'),
    ),
    'Project Management Organization: delete own' => array(
      'title' => t('Delete Authored PM Organization'),
      'description' => t('For organizations authored by the user, allows the user to delete the organization.'),
    ),
    'Project Management Organization: edit all' => array(
      'title' => t('Edit Any PM Organization'),
      'description' => t('Allows the user to edit any organization.'),
    ),
    'Project Management Organization: edit own' => array(
      'title' => t('Edit Authored PM Organization'),
      'description' => t('For organizations authored by the user, allows the user to edit the organization.'),
    ),
    'Project Management Organization: edit belonged' => array(
      'title' => t('Edit Belonged PM Organization'),
      'description' => t('Allows users assigned to a PM Person linked to an organization to edit that organization.'),
    ),
    'Project Management Organization: view all' => array(
      'title' => t('View Any PM Organization'),
      'description' => t('Allows the user to view any organization and see any organization in lists or dropdowns elsewhere on the site.'),
    ),
    'Project Management Organization: view own' => array(
      'title' => t('View Authored PM Organization'),
      'description' => t('For organizations authored by the user, allows the user to view the organization and see the organization in lists or dropdowns elsewhere on the site.'),
    ),
    'Project Management Organization: view belonged' => array(
      'title' => t('View Belonged PM Organization'),
      'description' => t('Allows users assigned to a PM Person linked to an organization to view that organization and see that organization in lists or dropdowns elsewhere on the site.'),
    ),
  );
}

/**
 * Implements hook_node_access().
 *
 * Define node access requirements for Project Management Organization nodes.
 */
function pmorganization_node_access($node, $op, $account = NULL) {
  $type = is_string($node) ? $node : $node->type;
  // If no account is specified, assume that the check is against the current logged in user
  if (is_null($account)) {
    global $user;
    $account = $user;
  }
  if ($type == 'pmorganization' && $op == 'create') {
    if (user_access('Project Management Organization: add', $account)) {
      return NODE_ACCESS_ALLOW;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_menu().
 */
function pmorganization_menu() {
  $items = array();
  $items['admin/config/pm/organization'] = array(
    'title' => 'Organizations',
    'description' => 'Configure default PM Organization.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pmorganization_admin_settings'),
    'access arguments' => array('Project Management: access administration pages'),
  );
  return $items;
}

/**
 * Implements hook_node_info().
 */
function pmorganization_node_info() {
  return array(
    'pmorganization' => array(
      'name' => t('Organization'),
      'base' => 'pmorganization',
      'description' => t("An organization for Project Management."),
      'title_label' => t("Name"),
      'body_label' => t("Description"),
    )
  );
}

/**
 * Implements hook_form().
 */
function pmorganization_form($node, &$form_state) {
  $breadcrumb = array(
    l(t('Project Management'), 'pm'),
    l(t('Organizations'), 'pm/organizations'),
  );
  drupal_set_breadcrumb($breadcrumb);
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function pmorganization_view($node, $view_mode) {
  if ($view_mode == 'full' && node_is_page($node)) {
    $breadcrumb = array(
      l(t('Project Management'), 'pm'),
      l(t('Organizations'), 'pm/organizations'),
    );
    drupal_set_breadcrumb($breadcrumb);
  }
  return $node;
}

/**
 * Admin settings form for pmproject module
 */
function pmorganization_admin_settings() {
  $form = array();

  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('status', 1)
    ->condition('type', 'pmorganization')
    ->addTag('node_access')
    ->orderBy('title', 'ASC');

  $result = $query->execute();

  $organizations = array();
  while ($organization = $result->fetchObject()) {
    $organizations[$organization->nid] = $organization->title;
  }

  if (count($organizations) > 0) {
    $form['pm_organization_nid'] = array(
      '#type' => 'select',
      '#title' => t('Host organization'),
      '#options' => $organizations,
      '#default_value' => variable_get('pm_organization_nid', 0),
      '#description' => t('The organization that owns this system'),
      '#weight' => -30,
    );
  }
  else {
    $form['pm_organization_nid'] = array(
      '#type' => 'item',
      '#title' => t('Host organization'),
      '#markup' => t('There are no Project Management Organizations in the system.') . '<br />' . l(t('Create a Project Management Organization'), 'node/add/pmorganization'),
    );
  }
  return system_settings_form($form);
}

/**
 * Implements hook_views_api().
 */
function pmorganization_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'pmorganization'),
  );
}


/**
 * Implements hook_node_access_records().
 */
function pmorganization_node_access_records($node) {
  if (empty($node->status)) {
    // Lets Drupal take care of permission to unpublished nodes.
    return array();
  }
  $type = is_string($node) ? $node : $node->type;
  $grants = array();
  if ($type == 'pmorganization') {
    // Project Management Organization: view all
    $grants[] = array(
      'realm' => 'pmorganization_view_all',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Organization: view own
    $grants[] = array(
      'realm' => 'pmorganization_view_own',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Organization: view belonged
    $grants[] = array(
      'realm' => 'pmorganization_view_if_user_org',
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );

    // Project Management Organization: edit all
    $grants[] = array(
      'realm' => 'pmorganization_update_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Organization: edit own
    $grants[] = array(
      'realm' => 'pmorganization_update_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Organization: edit belonged
    $grants[] = array(
      'realm' => 'pmorganization_update_if_user_org',
      'gid' => $node->nid,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Organization: delete all
    $grants[] = array(
      'realm' => 'pmorganization_delete_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'priority' => 0,
    );
    // Project Management Organization: delete own
    $grants[] = array(
      'realm' => 'pmorganization_delete_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'priority' => 0,
    );
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function pmorganization_node_grants($account, $op) {

  $is_pmperson = FALSE;
  if (!isset($account->pmorganization_nid) && module_exists('pmperson')) {
    _pmperson_user_load($account);
  }
  if (isset($account->pmperson_nid) AND $account->pmperson_nid > 0) {
    $is_pmperson = TRUE;
  }
  $grants = array();
  switch ($op) {
    case 'view':
      if (user_access('Project Management Organization: view all', $account)) {
        $grants['pmorganization_view_all'] = array(0);
      }
      if (user_access('Project Management Organization: view own', $account)) {
        $grants['pmorganization_view_own'] = array($account->uid);
      }
      if ($is_pmperson) {
        if (user_access('Project Management Organization: view belonged', $account)) {
          $grants['pmorganization_view_if_user_org'] = array($account->pmorganization_nid);
        }
      }
      break;

    case 'update':
      if (user_access('Project Management Organization: edit all', $account)) {
        $grants['pmorganization_update_all'] = array(0);
      }
      if (user_access('Project Management Organization: edit own', $account)) {
        $grants['pmorganization_update_own'] = array($account->uid);
      }
      if ($is_pmperson) {
        if (user_access('Project Management Organization: edit belonged', $account)) {
          $grants['pmorganization_update_if_user_org'] = array($account->pmorganization_nid);
        }
      }
      break;

    case 'delete':
      if (user_access('Project Management Organization: delete all', $account)) {
        $grants['pmorganization_delete_all'] = array(0);
      }
      if (user_access('Project Management Organization: delete own', $account)) {
        $grants['pmorganization_delete_own'] = array($account->uid);
      }
      break;
  }
  return $grants;
}

/**
 * Implements hook_pm_dashboard_links().
 */
function pmorganization_pm_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'pm_dashboard_link',
      'title' => t('Organizations'),
      'icon' => 'pmorganizations',
      'path' => 'pm/organizations',
      'params' => array(),
      'node_type' => 'pmorganization',
      'add_type' => 'pmorganization',
      'map' => array(),
      'weight' => 1,
    );
  }
  return $links;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function pmorganization_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "field_group" && $api == "field_group") {
    return array("version" => "1");
  }
}
