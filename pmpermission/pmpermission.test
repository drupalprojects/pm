<?php
/**
 * @file
 * Test definitions for PM Permission.
 */

/**
 * Define a test case for PM Permission.
 */
class PmpermissionTestCase extends DrupalWebTestCase {

  /**
   * Returns meta data for PM Permission tests.
   */
  public static function getInfo() {
    return array(
      'name' => 'PM Permission functionality',
      'description' => 'Test the functionality of PM Permission.',
      'group' => 'Project Management',
    );
  }

  /**
   * Standard set up for all tests.
   */
  public function setUp() {
    parent::setUp('pm', 'pmpermission');
  }

  /**
   * Tests permissions after parent change.
   */
  public function testpmpermissionChangeParent() {
    // Enable modules required only for this test.
    $modules = array(
      'pmorganization',
      'pmproject',
    );
    module_enable($modules, TRUE);

    // Create one user to author nodes.
    $author_permissions = array(
      'create pmorganization content',
      'create pmproject content',
      'PM permission pmproject: update all',
    );
    $author = $this->drupalCreateUser($author_permissions);

    // Create two users for testing view permissions (A & B).
    $user_permissions = array(
      'PM permission pmproject: view own Organization',
    );
    $user_a = $this->drupalCreateUser($user_permissions);
    $user_b = $this->drupalCreateUser($user_permissions);

    // Create two organization nodes (A & B).
    $this->drupalLogin($author);


    // Assign each user to their respective organization.

    // Create one project node, attached to organization A.


    // Test that user A can view the project.
    $this->drupalLogin($user_a);


    // Test that user B can not view the project.
    $this->drupalLogin($user_b);


    // Attach the project to organization B.
    $this->drupalLogin($author);


    // Test that user A can not view the project.
    $this->drupalLogin($user_a);


    // Test that user B can view the project.
    $this->drupalLogin($user_b);


  }

  /**
   * Tests module uninstall path.
   */
  public function testpmpermissionUninstall() {
    $module = array('pmpermission');

    module_disable($module);
    drupal_uninstall_modules($module);
  }

}