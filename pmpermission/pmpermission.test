<?php
/**
 * @file
 * Test definitions for PM Permission.
 */

/**
 * Define a test case for PM Permission.
 */
class PmpermissionTestCase extends DrupalWebTestCase {

  /**
   * Returns meta data for PM Permission tests.
   */
  public static function getInfo() {
    return array(
      'name' => 'PM Permission functionality',
      'description' => 'Test the functionality of PM Permission.',
      'group' => 'Project Management',
    );
  }

  /**
   * Standard set up for all tests.
   */
  public function setUp() {
    parent::setUp('pm', 'pmpermission', 'pmorganization', 'pmproject');
  }

  /**
   * Tests permissions after parent change.
   */
  public function testpmpermissionChangeParent() {
    // Enable modules required only for this test.
    $modules = array(
      'pmorganization',
      'pmproject',
    );
    $result = module_enable($modules, TRUE);
    $this->AssertTrue($result, 'Modules were enabled successfully.');

    $this->resetAll();
    drupal_cron_run();

    // Allow PM Permission to override project permissions.
    variable_set('node_permissions_pmproject', 0);

    // Create one user to author nodes.
    $author_permissions = array(
      'create pmorganization content',
      'create pmproject content',
      'PM permission pmproject: update all',
    );
    $this->checkPermissions($author_permissions, TRUE);
    $author = $this->drupalCreateUser($author_permissions);
    $this->assertTrue(is_object($author), 'Author user successfully created.');

    // Create two users for testing view permissions (A & B).
    $user_permissions = array(
      'PM permission pmproject: view own Organization',
    );
    $this->checkPermissions($user_permissions, TRUE);
    $user_a = $this->drupalCreateUser($user_permissions);
    $user_b = $this->drupalCreateUser($user_permissions);
    $this->assertTrue(is_object($user_a), 'User A successfully created.');
    $this->assertTrue(is_object($user_b), 'User B successfully created.');

    // Create two organization nodes (A & B) with respective users as members.
    $this->drupalLogin($author);

    /* $organization_a_settings = array(
      'type' => 'pmorganization',
      'pmorganization_members' => $user_a->uid,
    );
    $organization_a = $this->drupalCreateNode($organization_a_settings);

    $organization_b_settings = array(
      'type' => 'pmorganization',
      'pmorganization_members' => $user_b->uid,
    );
    $organization_b = $this->drupalCreateNode($organization_b_settings); */

    // Create one project node, attached to organization A.
    /* $project_settings = array(
      'type' => 'pmproject',
      'pmproject_parent' => $organization_a->nid,
    );
    $project = $this->drupalCreateNode($project_settings); */

    // Test that user A can view the project.
    //$this->drupalLogin($user_a);
    //$this->drupalGet('node/' . $project->nid);
    //$this->assertResponse(200, 'Access granted to user A when project is attached to organization A.');

    // Test that user B can not view the project.
    //$this->drupalLogin($user_b);
    //$this->drupalGet('node/' . $project->nid);
    //$this->assertResponse(403, 'Access is denied to user B when project is attached to organization A.');

    // Attach the project to organization B.
    //$this->drupalLogin($author);
    //$project->pmproject_parent = $organization_b->nid;
    //node_save($project);

    // Test that user A can not view the project.
    //$this->drupalLogin($user_a);
    //$this->drupalGet('node/' . $project->nid);
    //$this->assertResponse(403, 'Access is denied to user A when project is attached to organization B.');

    // Test that user B can view the project.
    //$this->drupalLogin($user_b);
    //$this->drupalGet('node/' . $project->nid);
    //$this->assertResponse(200, 'Access granted to user B when project is attached to organization B.');
  }

  /**
   * Tests module uninstall path.
   */
  public function testpmpermissionUninstall() {
    $module = array('pmpermission');

    module_disable($module);
    $result = drupal_uninstall_modules($module);
    $this->AssertTrue($result, t('Module successfully uninstalled.'));
  }

}