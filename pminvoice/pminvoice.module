<?php

/**
 * @file
 *
 * 1: Hooks (help, perm, init, menu, theme, node_info)
 * 2: Access functions
 * 3: Load organization and project details
 * 4: Invoice create / edit form
 * 5: Invoice node manipulation functions
 * 6: Admin settings
 * 7: Auto_add handler
 * 8: Views hook
 * 9: Project Managementinvoiceitem legacy functions
 */

// HOOKS
function pminvoice_help($path, $arg) {
  $o = '';

  switch ($path) {
    case "admin/help#pminvoice":
      $o = '<p>'. t("Provides invoice support for Project Management") .'</p>';
      break;
  }
  return $o;
}

function pminvoice_permission() {
  return array(
    'Project Management invoice: access' => array(
      'title' => t('Access Project Management Invoice'),
    ),
    'Project Management invoice: add' => array(
      'title' => t('Add Project Management Invoices'),
    ),
    'Project Management invoice: delete all' => array(
      'title' => t('Delete Any Project Management Invoice'),
    ),
    'Project Management invoice: delete own' => array(
      'title' => t('Delete Authored Project Management Invoices'),
    ),
    'Project Management invoice: delete of user organization' => array(
      'title' => t('Delete Project Management Invoices in own Organization'),
    ),
    'Project Management invoice: edit all' => array(
      'title' => t('Edit Any Project Management Invoice'),
    ),
    'Project Management invoice: edit own' => array(
      'title' => t('Edit Authored Project Management Invoices'),
    ),
    'Project Management invoice: edit of user organization' => array(
      'title' => t('Edit Project Management Invoices in own Organization'),
    ),
    'Project Management invoice: view all' => array(
      'title' => t('View Any Project Management Invoice'),
    ),
    'Project Management invoice: view own' => array(
      'title' => t('View Authored Project Management Invoices'),
    ),
    'Project Management invoice: view of user organization' => array(
      'title' => t('View Project Management Invoices in own Organization'),
    ),
  );
}

function pminvoice_menu() {
  $items = array();

  $items['pm/invoice/auto_add/new/%node'] = array(
    'page callback' => 'pminvoice_auto_add',
    'page arguments' => array(4),
    'access arguments' => array('Project Management invoice: add'),
    'type' => MENU_CALLBACK,
    'file' => 'pminvoice.auto_add.inc',
  );

  $items['pm/invoice/auto_add/existing/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pminvoice_auto_add_select'),
    'access arguments' => array('Project Management invoice: add'),
    'type' => MENU_CALLBACK,
    'file' => 'pminvoice.auto_add.inc',
  );

  $items['admin/config/pm/invoice'] = array(
    'title' => 'Project Management Invoice',
    'description' => 'Project Management Invoice Administration Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pminvoice_admin_settings'),
    'access arguments' => array('Project Management: access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function pminvoice_theme() {
  return array(
    'pminvoice_view' => array(
      'file'      => 'pminvoice.theme.inc',
      'variables' => array('node', 'view_mode'),
    ),
    'pminvoice_autoadd_links' => array(
      'file'      => 'pminvoice.theme.inc',
      'variables' => array(
        'nid' => NULL,
        'billable' => NULL,
        'billed' => NULL,
      ),
    ),
  );
}

function pminvoice_node_info() {
  return array(
    'pminvoice' => array(
      'name' => t('Invoice'),
      'base' => 'pminvoice',
      'description' => t("An invoice for Project Management."),
      'title_label' => t("Description"),
    ),
  );
}

function pminvoice_field_extra_fields() {
  $extra['node']['pminvoice'] = array(
    'form' => array(
      'group1' => array(
        'label' => 'Number',
        'weight' => -20,
      ),
      'group2' => array(
        'label' => 'Organization/Project/Reference Group',
        'weight' => -19,
      ),
      'group3' => array(
        'label' => 'Date Group',
        'weight' => -18,
      ),
      'group4' => array(
        'label' => 'Invoice Items',
        'weight' => -16,
      ),
      'group5' => array(
        'label' => 'Price Group',
        'weight' => -15,
      ),
    ),
  );
  return $extra;
}

function pminvoice_field_extra_fields_alter(&$info) {
  $info['node']['pminvoice']['form']['title']['weight'] = -17;
}

// ACCESS FUNCTIONS
function pminvoice_node_access($node, $op, $account = NULL) {
  return NODE_ACCESS_IGNORE;
}

function pminvoice_access($op, $node, $account=NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  if (is_numeric($node)) {
    $node = node_load($node);
  }
  if ($op == 'create') {
    return user_access('Project Management invoice: add');
  }

  if ($op == 'delete') {
    if (user_access('Project Management invoice: delete all')) {
      return TRUE;
    }
    elseif (user_access('Project Management invoice: delete own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    elseif (user_access('Project Management invoice: delete of user organization') && ($account->pmorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'update') {
    if (user_access('Project Management invoice: edit all')) {
      return TRUE;
    }
    elseif (user_access('Project Management invoice: edit own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    elseif (user_access('Project Management invoice: edit of user organization') && ($account->pmorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'view') {
    if (user_access('Project Management invoice: view all')) {
      return TRUE;
    }
    elseif (user_access('Project Management invoice: view own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    elseif (user_access('Project Management invoice: view of user organization') && ($account->pmorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }
  return FALSE;
}

function pminvoice_access_sql($sql, $where = array()) {
  if (user_access('Project Management invoice: view all')) {
    $where[] = "'pm_access'='pm_access'";
    return pm_rewrite_sql($sql, $where);
  }

  global $user;

  $cond = '';
  if (user_access('Project Management invoice: view own')) {
    $cond .= 'n.uid='. $user->uid;
  }
  if (user_access('Project Management invoice: view of user organization')) {
    if (!empty($cond)) $cond .= ' OR ';
    $cond .= 'sin.organization_nid='. $user->pmorganization_nid;
  }
  if (empty($cond)) $cond = '0=1';
  $where[] = $cond;

  $where[] = "'pm_access'='pm_access'";
  return pm_rewrite_sql($sql, $where);
}

function pminvoice_pm_rewrite_where_sql($query, $primary_table, $account) {
  static $conds = array();

  if (isset($conds[$primary_table][$account->uid])) {
    return $conds[$primary_table][$account->uid];
  }

  if (preg_match("/'pm_access'='pm_access'/", $query)) {
    $cond = '';
  }
  else {
    if (user_access('Project Management invoice: view all', $account)) {
      return '';
    }

    $cond = '';
    if (user_access('Project Management invoice: view own', $account)) {
      $cond .= "${primary_table}.uid=". $account->uid;
    }
    if (user_access('Project Management invoice: view of user organization', $account)) {
      if ($cond) {
        $cond .= ' OR ';
      }
      // If function is called without viewing an organization, this variable may not be set.
      // These lines check for that and set the organization node id to zero if not otherwise set.
      if (!isset($account->pmorganization_nid)) {
        $account->pmorganization_nid = 0;
      }
      $cond .= ' sin1.organization_nid='. $account->pmorganization_nid;
    }
    if ($cond) {
      $cond = " WHEN 'pminvoice' THEN (SELECT IF($cond,1,0) FROM {pminvoice} sin1 WHERE sin1.vid=${primary_table}.vid) ";
    }
    else {
      $cond = " WHEN 'pminvoice' THEN 0 ";
    }
  }

  $conds[$primary_table][$account->uid] = $cond;
  return $cond;
}

/**
 * Implements pmorganization_change().
 */
function pminvoice_pmorganization_change($organization_nid, $organization_title) {
  db_update('pminvoice')
    ->fields(array('organization_title' => $organization_title))
    ->condition('organization_nid', $organization_nid)
    ->execute();
}

/**
 * Implements pmorganization_change().
 */
function pminvoice_pmproject_change($project_nid, $project_title) {
  db_update('pminvoice')
    ->fields(array('project_title' => $project_title))
    ->condition('project_nid', $project_nid)
    ->execute();
}

/**
 * Implements pmproject_change_hierarchy().
 */
function pminvoice_pmproject_change_hierarchy($project_nid, $organization_nid, $organization_title) {
  db_update('pminvoice')
    ->fields(array(
      'organization_nid' => $organization_nid,
      'organization_title' => $organization_title,
    ))
    ->condition('project_nid', $project_nid)
    ->execute();
}

// INVOICE CREATE/EDIT FORM
function pminvoice_form(&$node) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('Project Management'), 'pm');
  $breadcrumb[] = l(t('Invoices'), 'pm/invoices');
  drupal_set_breadcrumb($breadcrumb);

  if (arg(1)=='add') {
    $node->requestdate = time();
    $node->duedate = $node->requestdate + (variable_get('pminvoice_payment_days', 30) * 86400);
    $node->number = pminvoice_get_invoice_number($node->requestdate);
    $node->paymentdate = NULL;

    if (array_key_exists('organization_nid', $_GET) && !$node->organization_nid) {
      $node->organization_nid = $_GET['organization_nid'];
    }
    if (array_key_exists('project_nid', $_GET) && !$node->project_nid) {
      $node->project_nid = $_GET['project_nid'];
      $p = node_load($node->project_nid);
      $node->organization_nid = $p->organization_nid;
      if (!pmorganization_node_access($node->organization_nid, 'view')) {
        drupal_set_message(t("You cannot add an invoice for this project, as you do not have access to view the organization's profile"));
        drupal_goto('node/'. $node->project_nid);
      }
    }

    if (isset($_SESSION['pminvoice_list_filter']['organization_nid']) && !$node->organization_nid) {
      $node->organization_nid = $_SESSION['pminvoice_list_filter']['organization_nid'];
    }
    if (isset($_SESSION['pminvoice_list_filter']['project_nid']) && !$node->project_nid) {
      $node->project_nid = $_SESSION['pminvoice_list_filter']['project_nid'];
    }
  }

  $type = node_type_get_type($node);
  $info = field_info_extra_fields('node', 'pminvoice', 'form');

  $form['#attributes']['class'] = 'pmcomponent_node_form';

  $form['group1'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group1']['weight'],
  );

  $form['group1']['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Number'),
    '#required' => TRUE,
    '#size' => 10,
    '#default_value' => $node->number,
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => $info['title']['weight'],
  );

  $form['group2'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group2']['weight'],
  );

  $org_query = db_select('node', 'n');
  $org_query->join('pmorganization', 'sor', 'n.vid = sor.vid');
  $org_query
    ->fields('n', array('nid', 'title'))
    ->condition('n.status', 1)
    ->condition('n.type', 'pmorganization')
    ->condition('sor.isactive', 1)
    ->orderBy('n.title', 'ASC')
    ->addTag('node_access');

//  $s_org = pmorganization_access_sql($s_org);
  $org_result = $org_query->execute();

  $organizations = array();
  foreach ($org_result as $organization) {
    $organizations[$organization->nid] = $organization->title;
    if (!isset($node->organization_nid)) $node->organization_nid = $organization->nid;
  }
  $form['group2']['organization_nid'] = array(
    '#type' => 'select',
    '#title' => t('Organization'),
    '#default_value' => $node->organization_nid,
    '#options' => $organizations,
    '#required' => TRUE,
  );

  $pro_query = db_select('node', 'n');
  $pro_query->join('pmproject', 'spr', 'n.vid = spr.vid');
  $pro_query
    ->fields('n', array('nid', 'title'))
    ->condition('n.status', 1)
    ->condition('n.type', 'pmproject')
    ->condition('spr.organization_nid', $node->organization_nid)
    ->orderBy('n.title', 'ASC')
    ->addTag('node_access');

//  $s = pmproject_access_sql($s);
  $pro_result = $pro_query->execute();
  $projects = array();
  foreach ($pro_result as $project) {
    $projects[$project->nid] = $project->title;
  }
  $projects = array(0 => '-') + $projects;
  $form['group2']['project_nid'] = array(
    '#type' => 'select',
    '#title' => t('Project'),
    '#default_value' => isset($node->project_nid) ? $node->project_nid : NULL,
    '#options' => $projects,
//    '#process' => array('pm_dependent_select_process'),
  );

  $form['group2']['reference'] = array(
    '#type' => 'textfield',
    '#title' => t('Reference'),
    '#default_value' => isset($node->reference) ? $node->reference : NULL,
    '#size' => 40,
  );

  $form['group3'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group3']['weight'],
  );

  $form['group3']['requestdate'] = array(
    '#type' => 'dateext',
    '#withnull' => 'true',
    '#title' => t('Request date'),
    '#default_value' => $node->requestdate,
  );

  $form['group3']['duedate'] = array(
    '#type' => 'dateext',
    '#withnull' => 'true',
    '#title' => t('Due date'),
    '#default_value' => $node->duedate,
  );

  $form['group3']['paymentdate'] = array(
    '#type' => 'dateext',
    '#withnull' => 'true',
    '#title' => t('Payment date'),
    '#default_value' => $node->paymentdate,
  );

  $form['group4'] = array(
    '#type' => 'markup',
    '#weight' => $info['group4']['weight'],
  );

  $count = (isset($node->items)) ? count($node->items) : 0;
  for ($k = $count; $k <= $count + 2; $k++) {
    $node->items[$k] = new stdClass;
    $node->items[$k]->tax1app = variable_get('pm_tax1_app', 1);
    $node->items[$k]->tax1percent = variable_get('pm_tax1_percent', 20);
    $node->items[$k]->tax2app = variable_get('pm_tax2_app', 0);
    $node->items[$k]->tax2percent = variable_get('pm_tax2_percent', 20);
    $node->items[$k]->new_item = TRUE;
  }

  $i = 0;
  foreach ($node->items as $item) {
    $form['group4'][$i] = array(
      '#type' => 'fieldset',
      '#title' => isset($node->items[$i]->new_item) ? 'New item' : 'Item '. ($i + 1),
      '#collapsible' => TRUE,
      '#collapsed' => isset($node->items[$i]->new_item) ? TRUE : FALSE,
      '#weight' => $i,
    );

    $form['group4'][$i]['first'] = array(
      '#type' => 'markup',
      '#theme' => 'pm_form_group',
      '#weight' => 1,
    );

    $form['group4'][$i]['first']['items_'. $i .'_description'] = array(
      '#type' => 'textfield',
      '#title' => 'Item description',
      '#default_value' => isset($node->items[$i]->description) ? $node->items[$i]->description : NULL,
      '#size' => 80,
    );


    $form['group4'][$i]['first']['items_'. $i .'_amount'] = array(
      '#type' => 'textfield',
      '#withnull' => 'true',
      '#title' => t('Amount'),
      '#size' => 15,
      '#default_value' => isset($node->items[$i]->amount) ? $node->items[$i]->amount : 0,
    );

    $form['group4'][$i]['first']['items_'. $i .'_weight'] = array(
      '#type' => 'textfield',
      '#title' => t('Weight'),
      '#size' => 3,
      '#maxlength' => 3,
      '#default_value' => isset($node->items[$i]->weight) ? $node->items[$i]->weight : 0,
    );

    $form['group4'][$i]['tax1'] = array(
      '#type' => 'markup',
      '#theme' => 'pm_form_group',
      '#weight' => 2,
    );

    $form['group4'][$i]['tax1']['items_'. $i .'_tax1app'] = array(
      '#type' => 'select',
      '#title' => t('@tax1 Application', array('@tax1' => variable_get('pm_tax1_name', 'Tax 1'))),
      '#options' => array(
        1 => t('Apply to item amount'),
        0 => t('Do not apply tax'),
      ),
      '#default_value' => $node->items[$i]->tax1app,
    );

    $form['group4'][$i]['tax1']['items_'. $i .'_tax1percent'] = array(
      '#type' => 'textfield',
      '#title' => t('@tax1 Percentage', array('@tax1' => variable_get('pm_tax1_name', 'Tax 1'))),
      '#default_value' => $node->items[$i]->tax1percent,
      '#size' => 20,
    );

    $form['group4'][$i]['tax2'] = array(
      '#type' => 'markup',
      '#theme' => 'pm_form_group',
      '#weight' => 3,
    );

    $form['group4'][$i]['tax2']['items_'. $i .'_tax2app'] = array(
      '#type' => 'select',
      '#title' => t('@tax2 Application', array('@tax2' => variable_get('pm_tax2_name', 'Tax 2'))),
      '#options' => array(
        2 => t('Apply to total of item amount plus previous tax'),
        1 => t('Apply to item amount'),
        0 => t('Do not apply tax'),
      ),
      '#default_value' => $node->items[$i]->tax2app,
    );

    $form['group4'][$i]['tax2']['items_'. $i .'_tax2percent'] = array(
      '#type' => 'textfield',
      '#title' => t('@tax2 Percentage', array('@tax2' => variable_get('pm_tax2_name', 'Tax 2'))),
      '#default_value' => $node->items[$i]->tax2percent,
      '#size' => 20,
    );

    $form['group4'][$i]['first']['items_'. $i .'_src_nid'] = array(
      '#type' => 'hidden',
      '#default_value' => isset($node->items[$i]->src_nid) ? $node->items[$i]->src_nid : NULL,
    );

    $form['group4'][$i]['first']['items_'. $i .'_src_vid'] = array(
      '#type' => 'hidden',
      '#default_value' => isset($node->items[$i]->src_vid) ? $node->items[$i]->src_vid : NULL,
    );

    if (!variable_get('pm_tax_display', TRUE)) {
      $form['group4'][$i]['tax1']['#type'] = 'hidden';
      $form['group4'][$i]['tax2']['#type'] = 'hidden';
    }
    if (!variable_get('pm_tax2_display', TRUE)) {
      $form['group4'][$i]['tax2']['#type'] = 'hidden';
    }

    $form['group4'][$i]['items_'. $i .'_total'] = array(
      '#type' => 'hidden',
      '#default_value' => isset($node->items[$i]->total) ? $node->items[$i]->total : NULL,
    );

    $i++;
  } // foreach

  $form['group5'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group5']['weight'],
  );

  $form['group5']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#size' => 15,
    '#default_value' => isset($node->amount) ? $node->amount : NULL,
  );

  $form['group5']['tax1'] = array(
    '#type' => 'textfield',
    '#title' => variable_get('pm_tax1_name', 'Tax 1'),
    '#size' => 15,
    '#default_value' => isset($node->tax1) ? $node->tax1 : NULL,
  );

  $form['group5']['tax2'] = array(
    '#type' => 'textfield',
    '#title' => variable_get('pm_tax2_name', 'Tax 2'),
    '#size' => 15,
    '#default_value' => isset($node->tax2) ? $node->tax2 : NULL,
  );

  $form['group5']['total'] = array(
    '#type' => 'textfield',
    '#title' => t('Total'),
    '#size' => 15,
    '#default_value' => isset($node->total) ? $node->total : NULL,
  );

  if (!variable_get('pm_tax_display', TRUE)) {
    $form['group5']['tax1']['#type'] = 'hidden';
    $form['group5']['tax2']['#type'] = 'hidden';
    $form['group5']['total']['#type'] = 'hidden';
  }

  if (!variable_get('pm_tax2_display', TRUE)) {
    $form['group5']['tax2']['#type'] = 'hidden';
  }

  $form['group5']['totalcustomercurr'] = array(
    '#type' => 'textfield',
    '#title' => t('Total in customer currency'),
    '#size' => 15,
    '#default_value' => isset($node->totalcustomercurr) ? $node->totalcustomercurr : NULL,
  );

  return $form;
}

// INVOICE NODE MANIPULATION FUNCTIONS
function pminvoice_insert($node) {
  _pminvoice_beforesave($node);

  $node->taxexempt = (isset($node->taxexempt)) ? $node->taxexempt : NULL;
  $node->src_nid = (isset($node->src_nid)) ? $node->src_nid : NULL;
  $node->src_vid = (isset($node->src_vid)) ? $node->src_vid : NULL;

  db_insert('pminvoice')
  ->fields(array(
    'vid' => $node->vid,
    'nid' => $node->nid,
    'number' => $node->number,
    'reference' => $node->reference,
    'organization_nid' => $node->organization_nid,
    'organization_title' => $node->organization_title,
    'project_nid' => $node->project_nid,
    'project_title' => $node->project_title,
//    'amount' => $node->amount, // will be set later
//    'tax1' => $node->tax1,
//    'tax2' => $node->tax2,
//    'total' => $node->total,
//    'totalcustomercurr' => $node->totalcustomercurr,
    'requestdate' => $node->requestdate,
    'duedate' => $node->duedate,
    'paymentdate' => $node->paymentdate,
    'taxexempt' => $node->taxexempt,
    'src_nid' => $node->src_nid,
    'src_vid' => $node->src_vid,
  ))
  ->execute();

  // Insert invoice items
//  _pminvoice_insert_items($node);

//  _pminvoice_aftersave($node);
}

function pminvoice_update($node) {
  _pminvoice_beforesave($node);

  if ($node->revision) {
    pminvoice_insert($node);
  }
  else {
    db_update('pminvoice')
    ->fields(array(
      'number' => $node->number,
      'reference' => $node->reference,
      'organization_nid' => $node->organization_nid,
      'organization_title' => $node->organization_title,
      'project_nid' => $node->project_nid,
      'project_title' => $node->project_title,
      'amount' => $node->amount,
      'tax1' => $node->tax1,
      'tax2' => $node->tax2,
      'total' => $node->total,
      'totalcustomercurr' => $node->totalcustomercurr,
      'requestdate' => $node->requestdate,
      'duedate' => $node->duedate,
      'paymentdate' => $node->paymentdate,
      'taxexempt' => $node->taxexempt,
      'src_nid' => $node->src_nid,
      'src_vid' => $node->src_vid,
    ))
    ->condition('vid', $node->vid)
    ->execute();

    // Update invoice items
    db_delete('pminvoice_items')
    ->condition('invoice_vid', $node->vid)
    ->execute();

    _pminvoice_insert_items($node);

    _pminvoice_aftersave($node);
  }
}

function _pminvoice_beforesave(&$node) {
  // Allow use of comma when inputting numerical values - str_replace with period decimal
  $node->amount = str_replace(',', '.', $node->amount);
  $node->tax1 = str_replace(',', '.', $node->tax1);
  $node->tax2 = str_replace(',', '.', $node->tax2);
  $node->total = str_replace(',', '.', $node->total);
  $node->totalcustomercurr = str_replace(',', '.', $node->totalcustomercurr);

  if (is_array($node->requestdate)) $node->requestdate = _pm_date_to_gmtimestamp($node->requestdate);
  if (is_array($node->duedate)) $node->duedate = _pm_date_to_gmtimestamp($node->duedate);
  if (is_array($node->paymentdate)) $node->paymentdate = _pm_date_to_gmtimestamp($node->paymentdate);

  $org_result = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('n.type', 'pmorganization')
    ->condition('n.nid', $node->organization_nid)
    ->execute();
  $organization = $org_result->fetchObject();
  $node->organization_title = $organization->title;

  if (isset($node->project_nid)) {
    $pro_result = db_select('node', 'n')
      ->fields('n', array('title'))
      ->condition('n.type', 'pmproject')
      ->condition('n.nid', $node->project_nid)
      ->execute();
    $project = $pro_result->fetchObject();
    $node->project_title = (isset($project->title)) ? $project->title : NULL;
  }

  // Parse invoice items
  // from linear to array/object combination
  $j = 0;
  $variable = 'items_'. $j . '_description';
  while (isset($node->$variable)) {
    $node->items[$j]->description = $node->$variable;
    $variable = 'items_'. $j .'_amount';
    $node->items[$j]->amount = str_replace(',', '.', $node->$variable);
    $variable = 'items_'. $j .'_tax1app';
    $node->items[$j]->tax1app = $node->$variable;
    $variable = 'items_'. $j .'_tax1percent';
    $node->items[$j]->tax1percent = $node->$variable;
    $variable = 'items_'. $j .'_tax2app';
    $node->items[$j]->tax2app = $node->$variable;
    $variable = 'items_'. $j .'_tax2percent';
    $node->items[$j]->tax2percent = $node->$variable;
    $variable = 'items_'. $j .'_weight';
    $node->items[$j]->weight = (isset($node->$variable)) ? $node->$variable : $j;

    $variable = 'items_'. $j .'_src_nid';
    $node->items[$j]->src_nid = $node->$variable;

    $variable = 'items_'. $j .'_src_vid';
    $node->items[$j]->src_vid = $node->$variable;

    // Update taxes
    pm_taxation($node->items[$j]);

    $j++;
    $variable = 'items_'. $j .'_description';
  }
}

function _pminvoice_insert_items($node) {
  foreach ($node->items as $j => $item) {
    $node->items[$j]->src_nid = (isset($node->items[$j]->src_nid)) ? $node->items[$j]->src_nid : $node->src_nid;
    $node->items[$j]->src_vid = (isset($node->items[$j]->src_vid)) ? $node->items[$j]->src_vid : $node->src_vid;

    db_insert('pminvoice_items')
    ->fields(array(
      'invoice_nid' => $node->nid,
      'invoice_vid' => $node->vid,
      'amount' => $node->items[$j]->amount,
      'description' => $node->items[$j]->description,
      'tax1app' => $node->items[$j]->tax1app,
      'tax1percent' => $node->items[$j]->tax1percent,
      'tax1' => $node->items[$j]->tax1,
      'tax2app' => $node->items[$j]->tax2app,
      'tax2percent' => $node->items[$j]->tax2percent,
      'tax2' => $node->items[$j]->tax2,
      'total' => $node->items[$j]->total,
      'weight' => $node->items[$j]->weight,
//      'src_nid' => $node->items[$j]->src_nid,
//      'src_vid' => $node->items[$j]->src_vid,
    ))
    ->execute();
  }

  db_delete('pminvoice_items')
  ->condition('invoice_vid', $node->vid)
  ->condition('total', 0)
  ->condition('description', '')
  ->execute();
}

function _pminvoice_aftersave($node) {
  // Updates totals
  $result = db_select('pminvoice_items', 'sii')
  ->addExpression('sum(amount)', 'tamount')
  ->addExpression('sum(tax1)', 'ttax1')
  ->addExpression('sum(tax2)', 'ttax2')
  ->addExpression('sum(total)', 'ttotal')
  ->condition('invoice_vid', $node->vid)
  ->execute();

  $t = $result->fetchObject();

  $node->amount = $t->tamount;
  $node->tax1 = $t->ttax1;
  $node->tax2 = $t->ttax2;
  $node->total = $t->ttotal;

  if (!$node->totalcustomercurr) {
    $node->totalcustomercurr = $node->total;
  }

  db_update('pminvoice')
  ->fields(array(
    'amount' => $node->amount,
    'tax1' => $node->tax1,
    'tax2' => $node->tax2,
    'total' => $node->total,
    'totalcustomercurr' => $node->totalcustomercurr,
  ))
  ->condition('vid', $node->vid)
  ->execute();
}

function pminvoice_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {pminvoice} WHERE vid = %d', $node->vid);
      db_query('DELETE FROM {pminvoice_items} WHERE invoice_vid = %d', $node->vid);
      break;
  }
}

function pminvoice_delete($node) {
  db_delete('pminvoice')
  ->condition('nid', $node->nid)
  ->execute();

  db_delete('pminvoice_items')
  ->condition('invoice_nid', $node->nid)
  ->execute();
}

function pminvoice_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    $result = db_select('pminvoice', 'pmin')
      ->fields('pmin')
      ->condition('vid', $node->vid)
      ->execute();
    $record = array();
    $record = $result->fetchAssoc();
    if ($record) {
      foreach ($record as $key => $value) {
        $node->$key = $value;
      }
    }

    $node->title_old = $node->title;
  }

  // Load invoice items
/*  $result = db_query('SELECT * FROM {pminvoice_items} WHERE invoice_vid = %d ORDER BY weight ASC', $node->vid);
  $additions->items = array();
  while ($item = db_fetch_object($result)) {
    $additions->items[] = $item;
  }*/
}

function pminvoice_view($node, $view_mode) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('Project Management'), 'pm');
  $breadcrumb[] = l(t('Invoices'), 'pm/invoices');
  drupal_set_breadcrumb($breadcrumb);

  return theme('pminvoice_view', array('node' => $node, 'view_mode' => $view_mode));
}

// ADMIN SETTINGS
function pminvoice_admin_settings() {
  $form = array();

  $form['pminvoice_payment_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of days for invoice payment'),
    '#default_value' => variable_get('pminvoice_payment_days', 30),
    '#description' => t('Default number of days for invoice payment'),
    '#size' => 5,
  );

  $form['pminvoice_hours_per_day'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of hours in a day'),
    '#default_value' => variable_get('pminvoice_hours_per_day', 8),
    '#description' => t('Number of hours in a day, used for calculating the daily rate.'),
    '#size' => 3,
  );

  $form['pminvoice_payment_modes'] = array(
    '#type' => 'textarea',
    '#title' => t('Modes for invoice payment'),
    '#default_value' => variable_get('pminvoice_payment_modes', ''),
    '#description' => t('Modes for invoice payment'),
  );

  $form['pminvoice_cover_note_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Cover note subject'),
    '#default_value' => variable_get('pminvoice_cover_note_subject', t('Invoice from !site', array('!site' => variable_get('site_name', 'Project Management')))),
    '#description' => t('Default subject for cover note'),
    '#size' => 50,
  );

  $form['pminvoice_cover_note'] = array(
    '#type' => 'textarea',
    '#title' => t('Cover note for invoice'),
    '#default_value' => variable_get('pminvoice_cover_note', 'Hope this comes easy to you.'),
    '#description' => t('Default cover note for pdf invoice sent by email'),
  );

  $form['pminvoice_payment_terms'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment terms'),
    '#default_value' => variable_get('pminvoice_payment_terms', t('Due on receipt')),
    '#description' => t('Payment terms'),
    '#size' => 50,
  );

  $form['pminvoice_tcpdf_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Location of tcpdf library'),
    '#default_value' => variable_get('pminvoice_tcpdf_location', t('sites/all/libraries/tcpdf')),
    '#description' => t('The directory that contains the <a href="http://sourceforge.net/projects/tcpdf/files/">TCPDF library</a> (sites/all/libraries/tcpdf is recommended).'),
    '#size' => 50,
  );

  return system_settings_form($form);
}

// VIEWS HOOK
function pminvoice_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'pminvoice'),
  );
}

// Helper function to return items for a particular invoice. Called from within the theme functions
function pminvoice_getitems($invoice_vid) {
  $s = "SELECT sit.* FROM {pminvoice_items} AS sit WHERE sit.invoice_vid = %d ORDER BY sit.weight ASC";
  $r = db_query($s, $invoice_vid);

  $items = array();
  while ($i = db_fetch_object($r)) {
    $items[] = $i;
  }
  return $items;
}

/**
 * @function
 * Creates next incremental invoice number
 *
 * @return varchar text value of the calculated invoice number
 */
function pminvoice_get_invoice_number($requestdate) {
  $date = getdate($requestdate);

  $result = db_select('pminvoice', 'sin')
  ->fields('sin', array('number'))
  ->execute();

  $existing = array(0);

  foreach ($result as $record) {
    $pos = substr($record->number, '/');
    $left = $pos;
    $right = strlen($record->number) - $pos;

    if (right($record->number, $right) == $date['year']) {
      $existing[] = left($record->number, $left);
    }
  }

  $increment = max($existing) + 1;

  $new_invoice_number = $increment .'/'. $date['year'];

  return $new_invoice_number;
}

/**
 * Try to obtain an hourly rate or fixed price for the new invoice item for a timetracking node.
 * To do this we will use the first technique, among the following, to work:
 *  (1) try to obtain a rate from a ticket
 *  (2) try to obtain a rate from a task
 *  (3) try to obtain a rate from a project
 *  (4) try to obtain a rate from an organization
 *  (5) return an error if none of this worked.
 *
 * @return
 *   Variables in an array.
 */
function pminvoice_get_rate($node) {
  $rate_array = array('pricemode_used' => '', 'rate_to_use' => 0);

  $hours_per_day = variable_get('pminvoice_hours_per_day', 8);
  $found = FALSE;

  $node_list = array();

  switch ($node->type) {
    case 'pmtimetracking':
      $node_list = array('ticket' => $node->ticket_nid, 'task' => $node->task_nid, 'project' => $node->project_nid, 'organization' => $node->organization_nid);
      break;
    case 'pmproject':
      $node_list = array('project' => $node->nid, 'organization' => $node->organization_nid);
      break;
    case 'pmtask':
      $node_list = array('task' => $node->nid, 'project' => $node->project_nid, 'organization' => $node->organization_nid);
      break;
    case 'pmticket':
      $node_list = array('ticket' => $node->nid, 'task' => $node->task_nid, 'project' => $node->project_nid, 'organization' => $node->organization_nid);
      break;
  }

  foreach ($node_list as $type => $nid) {
    if ($nid) {
      $parent_item = node_load($nid);
      switch ($parent_item->pricemode) {
        case 'hourly':
          if ($parent_item->durationunit == 'hour') {
            $found = TRUE;
            $rate_array['rate_to_use'] = $parent_item->price;
          }
          elseif ($parent_item->durationunit == 'day') {
            $found = TRUE;
            $rate_array['rate_to_use'] = $parent_item->price * $hours_per_day;
          }
          break;

        case 'daily':
          if ($parent_item->durationunit == 'hour') {
            $found = TRUE;
            $rate_array['rate_to_use'] = $parent_item->price / $hours_per_day;
          }
          elseif ($parent_item->durationunit == 'day') {
            $found = TRUE;
            $rate_array['rate_to_use'] = $parent_item->price;
          }
          break;

        case 'fixed':
          $found = TRUE;
          $rate_array['rate_to_use'] = 0;
          break;

        case 'fixed_price':
          $found = TRUE;
          $rate_array['rate_to_use'] = $parent_item->price;
          break;

        default:
          continue;
      }
    }
    if ($found == TRUE) {
      $rate_array['pricemode_used'] = $parent_item->pricemode;
      break;
    }
  }
  if ($found == FALSE) {
    drupal_set_message(t('Error whilst finding a rate from ticket, task, project and organization. Consider setting the pricemode and price for your client organizations to avoid this error.'), 'error');
  }
  return $rate_array;
}

function pminvoice_get_item_desc($rate_array, $node) {

  switch ($rate_array['pricemode_used']) {
    case 'hourly':
      if ($node->type == 'pmtimetracking') {
        $description = date('d M y', $node->trackingdate) . ': ' . t('@dur @units work at @rate per hour on @desc', array('@dur' => $node->billing_duration, '@unit' => $node->durationunit, '@rate' => $node->price, '@desc' => $node->title));
      }
      else {
        $description = date('d M y') . ': ' . t('@dur @units work at @rate per hour on @desc', array('@dur' => $node->duration, '@unit' => $node->durationunit, '@rate' => $node->price, '@desc' => $node->title));
      }
      break;
    case 'daily':
      if ($node->type == 'pmtimetracking') {
        $description = date('d M y', $node->trackingdate) . ': ' . t('@dur @units work at @rate per day on @desc', array('@dur' => $node->billing_duration, '@unit' => $node->durationunit, '@rate' => $node->price, '@desc' => $node->title));
      }
      else {
        $description = date('d M y') . ': ' . t('@dur @units work at @rate per day on @desc', array('@dur' => $node->duration, '@unit' => $node->durationunit, '@rate' => $node->price, '@desc' => $node->title));
      }
      break;
    case 'fixed':
      if ($node->type == 'pmtimetracking') {
        $description = date('d M y', $node->trackingdate) . ': ' . t('@dur @units unbilled work on @desc', array('@dur' => $node->billing_duration, '@unit' => $node->durationunit, '@desc' => $node->title));
      }
      else {
        $description = date('d M y') . ': ' . t('@dur @units unbilled work on @desc', array('@dur' => $node->duration, '@unit' => $node->durationunit, '@desc' => $node->title));
      }
      break;
    case 'fixed_price':
      switch ($node->type) {
        case 'pmtimetracking':
        $description = date('d M y', $node->trackingdate) . ': ' . t('work billed for @desc', array('@desc' => $node->title));
        break;
      case 'pmproject':
        $description = t('Project billed: @desc', array('@desc' => $node->title));
        break;
      case 'pmtask':
        $description = t('Task billed: @desc', array('@desc' => $node->title));
        break;
      case 'pmticket':
        $description = t('Ticket billed: @desc', array('@desc' => $node->title));
        break;
      }
  }

  return $description;

}

function pminvoice_get_item_amount($rate_array, $node) {
  switch ($rate_array['pricemode_used']) {
    case 'hourly':
      if ($node->type == 'pmtimetracking') {
        $amount = $node->billing_duration * $rate_array['rate_to_use'];
      }
      else {
        $amount = $node->duration * $rate_array['rate_to_use'];
      }
      break;
    case 'daily':
      if ($node->type == 'pmtimetracking') {
        $amount = $node->billing_duration * $rate_array['rate_to_use'];
      }
      else {
        $amount = $node->duration * $rate_array['rate_to_use'];
      }
      break;
    case 'fixed':
      $amount = $rate_array['rate_to_use'];
      break;
    case 'fixed_price':
      $amount = $rate_array['rate_to_use'];
      break;
    }

  return $amount;
}

/**
 * Implementation of hook_token_list().
 */
function pminvoice_token_list($type='all') {
  $tokens = array();
  if (($type == 'node') || ($type == 'all')) {
    $tokens['node']['pminvoice-number'] = t('Project Management Invoice: Number.');
    $tokens['node']['pminvoice-reference'] = t('Project Management Invoice: Reference.');
    $tokens['node']['pminvoice-organization-nid'] = t('Project Management Invoice: Organization Node ID.');
    $tokens['node']['pminvoice-organization-title'] = t('Project Management Invoice: Organization Title.');
    $tokens['node']['pminvoice-project-nid'] = t('Project Management Invoice: Project Node ID.');
    $tokens['node']['pminvoice-project-title'] = t('Project Management Invoice: Project Title.');
    $tokens['node']['pminvoice-requestdate'] = t('Project Management Invoice: Request Date.');
    $tokens['node']['pminvoice-duedate'] = t('Project Management Invoice: Due Date.');
    $tokens['node']['pminvoice-paymentdate'] = t('Project Management Invoice: Payment Date.');
    $tokens['node']['pminvoice-amount'] = t('Project Management Invoice: Amount.');
    $tokens['node']['pminvoice-total'] = t('Project Management Invoice: Total.');
    $tokens['node']['pminvoice-totalcustomer'] = t('Project Management Invoice: Total in customer currency.');
    $tokens['node']['pminvoice-taxexempt'] = t('Project Management Invoice: Tax Exempt.');
    if (variable_get('pm_tax1_app', 0)) {
      $tokens['node']['pminvoice-tax1'] = t('Project Management Invoice: '. variable_get('pm_tax1_name', 'VAT') .'.');
    }
    if (variable_get('pm_tax2_app', 0)) {
      $tokens['node']['pminvoice-tax2'] = t('Project Management Invoice: '. variable_get('pm_tax2_name', 'Tax 2') .'.');
    }
  }
  return $tokens;
}

/**
 * Implementation of hook_token_values().
 */
function pminvoice_token_values($type, $object = NULL) {
  $values = array();
  $node = $object;
  if ((($type == 'node') || ($type == 'all')) && ($node->type === 'pminvoice')) {
    $values['pminvoice-number'] = $node->number;
    $values['pminvoice-reference'] = $node->reference;
    $values['pminvoice-organization-nid'] = $node->organization_nid;
    $values['pminvoice-organization-title'] = $node->organization_title;
    $values['pminvoice-project-nid'] = $node->project_nid;
    $values['pminvoice-project-title'] = $node->project_title;
    $values['pminvoice-requestdate'] = format_date($node->requestdate, 'medium', '', variable_get('date_default_timezone', NULL));
    $values['pminvoice-payment'] = format_date($node->paymentdate, 'medium', '', variable_get('date_default_timezone', NULL));
    $values['pminvoice-duedate'] = format_date($node->duedate, 'medium', '', variable_get('date_default_timezone', NULL));
    $values['pminvoice-amount'] = $node->amount;
    $values['pminvoice-total'] = $node->total;
    $values['pminvoice-totalcustomer'] = $node->totalcustomer;
    $values['pminvoice-taxexempt'] = $node->taxexempt;
    if (variable_get('pm_tax1_app', 0)) {
      $values['pminvoice-tax1'] = $node->tax1;
    }
    if (variable_get('pm_tax2_app', 0)) {
      $values['pminvoice-tax2'] = $node->tax2;
    }
  return $values;
  }
}

function pminvoice_pm_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'pm_dashboard_link',
      'title' => t('Invoices'),
      'icon' => 'pminvoices',
      'path' => 'pm/invoices',
      'params' => array(),
      'access_arguments' => 'Project Management invoice: access',
      'node_type' => 'pminvoice',
      'add_type' => 'pminvoice',
      'map' => array(),
      'weight' => 10,
    );
  }
  return $links;
}
