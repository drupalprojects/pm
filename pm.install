<?php
/**
 * @file
 * Install, update and uninstall functions for the Project Management module.
 */

/**
 * Implements hook_uninstall().
 */
function pm_uninstall() {
  module_load_include('inc', 'pm', 'includes/pm.install');
  $module = 'pm';

  // Delete variables used by this module.
  pm_uninstall_variables($module);
}

/**
 * Implements hook_schema().
 */
function pm_schema() {
  $schema['pm_index'] = array(
    'description' => 'Maintains denormalized information about pm parent relationships.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node}.nid this record tracks.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'parent_nid' => array(
        'description' => 'The {node}.nid of this nodes parent.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'parent_type' => array(
        'description' => 'The {node_type}.type of the parent.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
      'parent_nid' => array('parent_nid'),
    ),
    'foreign keys' => array(
      'tracked_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
      'parent_nid' => array(
        'table' => 'node',
        'columns' => array('parent_nid' => 'nid'),
      ),
    ),
  );
  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function pm_update_last_removed() {
  return 6202;
}

/**
 * Enable new module dependencies and create billing status field.
 */
function pm_update_7101() {
}

/**
 * Make date field available to PM content types.
 */
function pm_update_7102() {
  variable_del('pm_yearsrangebegin');
  variable_del('pm_yearsrangeend');
}

/**
 * Migration from 7.x-1.x to 7.x-2.x.
 */
function pm_update_7103(&$sandbox) {
  $module_list = array('pmpermission');
  // Enable new dependencies.
  if (!module_enable($module_list, TRUE)) {
    throw new DrupalUpdateException('This version requires one or more modules that could not be enabled.');
  }
}

/**
 * Removal of legacy attribute table.
 */
function pm_update_7104() {
  db_drop_table('pmattribute');
}

/**
 * Removal of legacy variable.
 */
function pm_update_7105() {
  variable_del('pm_organization_nid');
}

/**
 * Removal of legacy variable related to icons.
 */
function pm_update_7108() {
  variable_del('pm_icons_path');
}

/**
 * Migrate pm_icons_display settings to new pm_icon variable.
 */
function pm_update_7200() {
  $display_icon = variable_get('pm_icons_display', TRUE);
  if ($display_icon) {
    variable_set('pm_icon', PM_ICON_SET_DEFAULT_BEHAVIOUR);
  }
  else {
    variable_set('pm_icon', PM_ICON_SET_NO_ICON);
  }
  variable_del('pm_icons_display');
}

/**
 * Remove legacy variables related to taxation.
 */
function pm_update_7201() {
  variable_del('pm_tax1_app');
  variable_del('pm_tax1_name');
  variable_del('pm_tax1_percent');
  variable_del('pm_tax2_app');
  variable_del('pm_tax2_name');
  variable_del('pm_tax2_percent');
}

/**
 * Include pmpermission module into core.
 */
function pm_update_7300() {
  // Rename all pmpermission_* variable to pm_permission_*.
  $result = db_query("SELECT name FROM {variable} WHERE name LIKE 'pmpermission_%'");
  foreach($result as $record) {
    $str = $record->name;
    $prefix = 'pmpermission';
    if (substr($str, 0, strlen($prefix)) == $prefix) {
        $str = substr($str, strlen($prefix));
    }
    $old_variable = $record->name;
    $new_variable = 'pm_permission' . $str;
    variable_set($new_variable, variable_get($old_variable, ''));
    variable_del($old_variable);
  }
}

/**
 * Create and populate pm_index table.
 */
function pm_update_7301(&$sandbox) {
  module_load_include('inc', 'pm', '/includes/pm.index');

  $schema = module_invoke('pm', 'schema');
  db_create_table('pm_index', $schema['pm_index']);

  // Retrieve all records.
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->execute();

  // Use the sandbox to store the information needed to track progression.
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['max'] = $result->rowCount();
    $sandbox['messages'] = array();
    $sandbox['current_node'] = -1;
  }

  // Process nodes by groups of 50.
  $limit = 50;

  // Retrieve the next group of nids.
  $query = db_select('node', 'n')->extend('PagerDefault');

  $result = $query->fields('n', array('nid'))
    ->condition('n.nid', $sandbox['current_node'], '>')
    ->limit($limit)->execute();

  foreach ($result as $row) {
    $node = node_load($row->nid);
    // Rebuild the index for each node.
    module_load_include('inc', 'pm', '/includes/pm.index');
    pm_delete_node_index($node);
    pm_build_node_index($node);
    // Update our progress information.
    $sandbox['progress']++;
    $sandbox['current_node'] = $row->nid;
  }

  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max'])
    ? TRUE
    : ($sandbox['progress'] / $sandbox['max']);

  if ($sandbox['#finished']) {
    return t('Project Management index has been created and populated.');
  }
}
