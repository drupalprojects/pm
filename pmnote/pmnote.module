<?php

/**
 * @file
 */

function pmnote_help($path, $arg) {
  $o = '';

  switch ($path) {
    case "admin/help#pmnote":
      $o = '<p>'. t("Provides note support for Project Management") .'</p>';
      break;
  }

  return $o;
}

function pmnote_permission() {
  return array(
    'Project Management note: access' => array(
      'title' => t('Access Project Management Note'),
    ),
    'Project Management note: add' => array(
      'title' => t('Add Project Management Notes'),
    ),
    'Project Management note: delete all' => array(
      'title' => t('Delete Any Project Management Note'),
    ),
    'Project Management note: delete own' => array(
      'title' => t('Delete Authored Project Management Notes'),
    ),
    'Project Management note: delete of user organization' => array(
      'title' => t('Delete Project Management Note in own Organization'),
    ),
    'Project Management note: edit all' => array(
      'title' => t('Edit Any Project Management Note'),
    ),
    'Project Management note: edit own' => array(
      'title' => t('Edit Authored Project Management Notes'),
    ),
    'Project Management note: edit of user organization' => array(
      'title' => t('Edit Project Management Notes in own Organization'),
    ),
    'Project Management note: view all' => array(
      'title' => t('View Any Project Management Note'),
    ),
    'Project Management note: view own' => array(
      'title' => t('View Authored Project Management Notes'),
    ),
    'Project Management note: view of user organization' => array(
      'title' => t('View Project Management Notes in own Organization'),
    ),
  );
}

function pmnote_node_access($node, $op, $account = NULL) {
  return NODE_ACCESS_IGNORE;
}

function pmnote_access($op, $node, $account=NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  if ($op == 'create') {
    return user_access('Project Management note: add');
  }

  if (is_numeric($node)) $node = node_load($node);

  if ($op == 'delete') {
    if (user_access('Project Management note: delete all')) {
      return TRUE;
    }
    elseif (user_access('Project Management note: delete own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    elseif (user_access('Project Management note: delete of user organization') && ($account->pmorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'update') {
    if (user_access('Project Management note: edit all')) {
      return TRUE;
    }
    elseif (user_access('Project Management note: edit own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    elseif (user_access('Project Management note: edit of user organization') && ($account->pmorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'view') {
    if (user_access('Project Management note: view all')) {
      return TRUE;
    }
    elseif (user_access('Project Management note: view own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    elseif (user_access('Project Management note: view of user organization') && ($account->pmorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }
  return FALSE;
}

function pmnote_access_sql($sql, $where = array()) {
  if (user_access('Project Management note: view all')) {
    $where[] = "'pm_access'='pm_access'";
    return pm_rewrite_sql($sql, $where);
  }

  global $user;

  $cond = '';
  if (user_access('Project Management note: view own')) {
    $cond .= 'n.uid='. $user->uid;
  }
  if (user_access('Project Management note: view of user organization')) {
    if (!empty($cond)) $cond .= ' OR ';
    $cond .= 'sno.organization_nid='. $user->pmorganization_nid;
  }
  if (empty($cond)) $cond = '0=1';
  $where[] = $cond;

  $where[] = "'pm_access'='pm_access'";
  return pm_rewrite_sql($sql, $where);
}

function pmnote_pm_rewrite_where_sql($query, $primary_table, $account) {
  static $conds = array();

  if (isset($conds[$primary_table][$account->uid])) {
    return $conds[$primary_table][$account->uid];
  }

  if (preg_match("/'pm_access'='pm_access'/", $query)) {
    $cond = '';
  }
  else {
    if (user_access('Project Management note: view all', $account)) {
      return '';
    }

    $cond = '';
    if (user_access('Project Management note: view own', $account)) {
      $cond .= "${primary_table}.uid=". $account->uid;
    }
    if (user_access('Project Management note: view of user organization', $account)) {
      if ($cond) {
        $cond .= ' OR ';
      }
      // If function is called without viewing a note, this variable may not be set.
      // These lines check for that and set the organization node id to zero if not otherwise set.
      if (!isset($account->pmorganization_nid)) {
        $account->pmorganization_nid = 0;
      }
      $cond .= ' sno1.organization_nid='. $account->pmorganization_nid;
    }
    if ($cond) {
      $cond = " WHEN 'pmnote' THEN (SELECT IF($cond,1,0) FROM {pmnote} sno1 WHERE sno1.vid=${primary_table}.vid) ";
    }
    else {
      $cond = " WHEN 'pmnote' THEN 0 ";
    }
  }

  $conds[$primary_table][$account->uid] = $cond;
  return $cond;
}

function pmnote_theme() {
  return array(
    'pmnote_view' => array(
      'file'      => 'pmnote.theme.inc',
      'variables' => array('node', 'view_mode'),
    ),
  );
}

function pmnote_node_info() {
  return array(
    'pmnote' => array(
      'name' => t('Note'),
      'base' => 'pmnote',
      'description' => t("A note for Project Management."),
    )
  );
}

function pmnote_field_extra_fields() {
  $extra['node']['pmnote'] = array(
    'form' => array(
      'group1' => array(
        'label' => 'Organization/Project/Task Group',
        'weight' => -20,
      ),
    ),
  );
  return $extra;
}

/**
 * Implements hook_field_extra_fields_alter().
 */
function pmnote_field_extra_fields_alter(&$info) {
  $info['node']['pmnote']['form']['title']['weight'] = -19;
}

/**
 * Implements hook_pmorganization_change().
 */
function pmnote_pmorganization_change($organization_nid, $organization_title) {
  db_update('pmnote')
    ->fields(array('organization_title' => $organization_title))
    ->condition('organization_nid', $organization_nid)
    ->execute();
}

/**
 * Implements hook_pmproject_change().
 */
function pmnote_pmproject_change($project_nid, $project_title) {
  db_update('pmnote')
    ->fields(array('project_title', $project_title))
    ->condition('project_nid', $project_nid)
    ->execute();
}

/**
 * Implements hook_pmtask_change().
 */
function pmnote_pmtask_change($task_nid, $task_title, $task_stepno) {
  db_update('pmnote')
    ->fields(array('task_title' => $task_title, 'task_stepno' => $task_stepno))
    ->condition('task_nid', $task_nid)
    ->execute();
}

/**
 * Implements hook_pmproject_change_hierarchy().
 */
function pmnote_pmproject_change_hierarchy($project_nid, $organization_nid, $organization_title) {
  $query = db_update('pmnote')
    ->fields(array(
      'organization_nid' => $organization_nid,
      'organization_title' => $organization_title,
    ))
    ->condition('project_nid', $project_nid)
    ->execute();
}

/**
 * Implements hook_pmtask_change_hierarchy().
 */
function pmnote_pmtask_change_hierarchy($task_nid, $organization_nid, $organization_title, $project_nid, $project_title) {
  $query = db_update('pmnote')
    ->fields(array(
      'organization_nid' => $organization_nid,
      'organization_title' => $organization_title,
      'project_nid' => $project_nid,
      'project_title' => $project_title,
    ))
    ->condition('task_nid', $task_nid)
    ->execute();
}

/**
 * Implements hook_form().
 */
function pmnote_form(&$node, $form_state) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('Project Management'), 'pm');
  $breadcrumb[] = l(t('Notes'), 'pm/notes');
  drupal_set_breadcrumb($breadcrumb);

  if (arg(1)=='add') {
    if (array_key_exists('organization_nid', $_GET) && !$node->organization_nid) {
      $node->organization_nid = $_GET['organization_nid'];
    }
    if (array_key_exists('project_nid', $_GET) && !$node->project_nid) {
      $node->project_nid = $_GET['project_nid'];
      $p = node_load($node->project_nid);
      $node->organization_nid = $p->organization_nid;
      if (!pmorganization_node_access($node->organization_nid, 'view')) {
        drupal_set_message(t("You cannot add a note for this project, as you do not have access to view the organization's profile"));
        drupal_goto('node/'. $node->project_nid);
      }
    }
    if (array_key_exists('task_nid', $_GET) && !$node->task_nid) {
      $node->task_nid = $_GET['task_nid'];
      $t = node_load($node->task_nid);
      $node->organization_nid = $t->organization_nid;
      $node->project_nid = $t->project_nid;
      // $project_access deals with the case whereby the project could be blank, hence access rules not required
      $project_access = $node->project_nid ? pmproject_access('view', $node->project_nid) : TRUE;
      if (!pmorganization_node_access($node->organization_nid, 'view') || !pmproject_access('view', $node->project_nid)) {
        drupal_set_message(t("You cannot add a note for this task, as you do not have access to view the both the organization and project's profile"));
        drupal_goto('node/'. $node->task_nid);
      }
    }

    if (isset($_SESSION['pmnote_list_filter']['organization_nid']) && !$node->organization_nid) {
      $node->organization_nid = $_SESSION['pmnote_list_filter']['organization_nid'];
    }
    if (isset($_SESSION['pmnote_list_filter']['project_nid']) && !$node->project_nid) {
      $node->project_nid = $_SESSION['pmnote_list_filter']['project_nid'];
    }
    if (isset($_SESSION['pmnote_list_filter']['task_nid']) && !$node->task_nid) {
      $node->task_nid = $_SESSION['pmnote_list_filter']['task_nid'];
    }
  }

  $type = node_type_get_type($node);
  $info = field_info_extra_fields('node', 'pmnote', 'form');

  $form['group1'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group1']['weight'],
  );

  $org_query = db_select('node', 'n');
  $org_query->join('pmorganization', 'sor', 'n.vid = sor.vid');
  $org_query
    ->fields('n', array('nid', 'title'))
    ->condition('n.status', 1)
    ->condition('n.type', 'pmorganization')
    ->condition('sor.isactive', 1)
    ->orderBy('n.title', 'ASC')
    ->addTag('node_access');

//  $s_org = pmorganization_access_sql($s_org);
  $org_result = $org_query->execute();
  $organizations = array();
  foreach ($org_result as $organization) {
    $organizations[$organization->nid] = $organization->title;
    if (!isset($node->organization_nid)) {
      $node->organization_nid = $organization->nid;
    }
  }
  $form['group1']['organization_nid'] = array(
    '#type' => 'select',
    '#title' => t('Organization'),
    '#default_value' => isset($node->organization_nid) ? $node->organization_nid : NULL,
    '#options' => $organizations,
    '#required' => TRUE,
    '#ajax' => array(
      'callback' => 'pmnote_ajax_organization_nid',
      'wrapper' => 'pmnote-project-nid',
    ),
  );

  if (isset($node->organization_nid)) {
    $organization_nid = isset($form_state['values']['organization_nid']) ? $form_state['values']['organization_nid'] : $node->organization_nid;
  }
  else {
    drupal_set_message(t('Please add an organization to the system before trying to add a note.'), 'error');
    $organization_nid = NULL;
  }

  $pro_query = db_select('node', 'n');
  $pro_query->join('pmproject', 'spr', 'n.vid = spr.vid');
  $pro_result = $pro_query
    ->fields('n', array('nid', 'title'))
    ->condition('n.status', 1)
    ->condition('spr.organization_nid', $organization_nid)
    ->condition('n.type', 'pmproject')
    ->orderBy('n.title', 'ASC')
    ->addTag('node_access')
    ->execute();

  $projects = array();
  foreach ($pro_result as $project) {
    $projects[$project->nid] = $project->title;
  }

  $project_nid = isset($form_state['values']['project_nid']) ? $form_state['values']['project_nid'] : (isset($node->project_nid) ? $node->project_nid : NULL);

  $form['group1']['project_nid'] = array(
    '#type' => 'select',
    '#title' => t('Project'),
    '#default_value' => $project_nid,
    '#options' => array(0 => '-') + $projects,
    '#prefix' => '<div id="pmnote-project-nid">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'callback' => 'pmnote_ajax_project_nid',
      'wrapper' => 'pmnote-task-nid',
    ),

  );

//  $tree = is_null($project_nid) ? array() : _pmtask_get_tree($project_nid);
//  $tasks = _pmtask_plain_tree($tree);
  $form['group1']['task_nid'] = array(
    '#type' => 'select',
    '#title' => t('Task'),
    '#default_value' => isset($node->task_nid) ? $node->task_nid : NULL,
    '#options' => array(0 => '-'),// + $tasks,
    '#prefix' => '<div id="pmtask-project-nid">',
    '#suffix' => '</div>',
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => $info['title']['weight'],
  );

  // Check to see if the body field is still there, if so, display it.
  $body = field_get_items('pmtask', $node, 'body');
  if ($body) {
    $form['body_field'] = $body;
  }

  return $form;
}

function pmnote_ajax_organization_nid(&$form, &$form_state) {
  return $form['group1']['project_nid'];
}

function pmnote_ajax_project_nid(&$form, &$form_state) {
  return $form['group1']['task_nid'];
}

function pmnote_insert($node) {
  _pmnote_beforesave($node);

  db_insert('pmnote')
    ->fields(array(
      'vid' => $node->vid,
      'nid' => $node->nid,
      'organization_nid' => $node->organization_nid,
      'organization_title' => $node->organization_title,
      'project_nid' => $node->project_nid,
      'project_title' => $node->project_title,
      'task_nid' => $node->task_nid,
      'task_title' => $node->task_title,
    ))
    ->execute();
}

function pmnote_update($node) {
  _pmnote_beforesave($node);

  if ($node->revision) {
    pmnote_insert($node);
  }
  else {
    db_update('pmnote')
      ->fields(array(
        'organization_nid' => $node->organization_nid,
        'organization_title' => $node->organization_title,
        'project_nid' => $node->project_nid,
        'project_title' => $node->project_title,
        'task_nid' => $node->task_nid,
        'task_title' => $node->task_title,
      ))
      ->condition('vid', $node->vid)
      ->execute();
  }
}

function _pmnote_beforesave(&$node) {
  $org_result = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('n.type', 'pmorganization')
    ->condition('n.nid', $node->organization_nid)
    ->execute();
  $organization = $org_result->fetchObject();
  $node->organization_title = $organization->title;

  $pro_result = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('n.type', 'pmproject')
    ->condition('n.nid', $node->project_nid)
    ->execute();
  $project = $pro_result->fetchObject();
  $node->project_title = isset($project->title) ? $project->title : '';

  $task_result = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('n.type', 'pmtask')
    ->condition('n.nid', $node->task_nid)
    ->execute();
  $task = $task_result->fetchObject();
  $node->task_title = isset($task->title) ? $task->title : '';
}

function pmnote_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_delete('pmnote')
        ->condition('vid', $node->vid)
        ->execute();
      break;
  }
}

function pmnote_delete($node) {
  db_delete('pmnote')
    ->condition('nid', $node->nid)
    ->execute();
}

function pmnote_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    $result = db_select('pmnote', 'sno')
      ->fields('sno')
      ->condition('sno.vid', $node->vid)
      ->execute();
    $record = $result->fetchAssoc();

    foreach ($record as $key => $value) {
      $node->$key = $value;
    }

    $node->title_old = $node->title;
  }
}

function pmnote_view($node, $view_mode = 'full') {
  if ($view_mode = 'full') {
    $breadcrumb = array();
    $breadcrumb[] = l(t('Project Management'), 'pm');
    $breadcrumb[] = l(t('Notes'), 'pm/notes');
    drupal_set_breadcrumb($breadcrumb);
  }

  return theme('pmnote_view', array('node' => $node, 'view_mode' => $view_mode));
}

function pmnote_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'pmnote'),
  );
}

function pmnote_pm_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'pm_dashboard_link',
      'title' => t('Notes'),
      'icon' => 'pmnotes',
      'path' => 'pm/notes',
      'params' => array(),
      'access_arguments' => 'Project Management note: access',
      'node_type' => 'pmnote',
      'add_type' => 'pmnote',
      'map' => array(),
      'weight' => 9,
    );
  }
  return $links;
}
