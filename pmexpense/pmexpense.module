<?php

/**
 * @file
 */

function pmexpense_help($path, $arg) {
  $o = '';

  switch ($path) {
    case "admin/help#pmexpense":
      $o = '<p>'. t("Provides expense support for Project Management") .'</p>';
      break;
  }

  return $o;
}

function pmexpense_permission() {
  return array(
    'Project Management expense: access' => array(
      'title' => t('Access Project Management Expense'),
    ),
    'Project Management expense: add' => array(
      'title' => t('Add Project Management Expense'),
    ),
    'Project Management expense: delete all' => array(
      'title' => t('Delete Any Project Management Expense'),
    ),
    'Project Management expense: delete own' => array(
      'title' => t('Delete Authored Project Management Expenses'),
    ),
    'Project Management expense: delete of user organization' => array(
      'title' => t('Delete  Project Management Expenses in own Organization'),
    ),
    'Project Management expense: edit all' => array(
      'title' => t('Edit Any Project Management Expense'),
    ),
    'Project Management expense: edit own' => array(
      'title' => t('Edit Authored Project Management Expenses'),
    ),
    'Project Management expense: edit of user organization' => array(
      'title' => t('Edit Project Management Expenses in own Organization'),
    ),
    'Project Management expense: view all' => array(
      'title' => t('View Any Project Management Expense'),
    ),
    'Project Management expense: view own' => array(
      'title' => t('View Authored Project Management Expenses'),
    ),
    'Project Management expense: view of user organization' => array(
      'title' => t('View Project Management Expenses in own Organization'),
    ),
  );
}

function pmexpense_access($op, $node, $account=NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  if ($op == 'create') {
    return user_access('Project Management expense: add');
  }

  if (is_numeric($node)) $node = node_load($node);

  if ($op == 'delete') {
    if (user_access('Project Management expense: delete all')) {
      return TRUE;
    }
    elseif (user_access('Project Management expense: delete own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    elseif (user_access('Project Management expense: delete of user organization') && ($account->pmorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'update') {
    if (user_access('Project Management expense: edit all')) {
      return TRUE;
    }
    elseif (user_access('Project Management expense: edit own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    elseif (user_access('Project Management expense: edit of user organization') && ($account->pmorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'view') {
    if (user_access('Project Management expense: view all')) {
      return TRUE;
    }
    elseif (user_access('Project Management expense: view own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    elseif (user_access('Project Management expense: view of user organization') && ($account->pmorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }
  return FALSE;
}

function pmexpense_access_sql($sql, $where = array()) {
  if (user_access('Project Management expense: view all')) {
    $where[] = "'pm_access'='pm_access'";
    return pm_rewrite_sql($sql, $where);
  }

  global $user;

  $cond = '';
  if (user_access('Project Management expense: view own')) {
    $cond .= 'n.uid='. $user->uid;
  }
  if (user_access('Project Management expense: view of user organization')) {
    if (!empty($cond)) $cond .= ' OR ';
    $cond .= 'sex.organization_nid='. $user->pmorganization_nid;
  }
  if (empty($cond)) $cond = '0=1';
  $where[] = $cond;

  $where[] = "'pm_access'='pm_access'";
  return pm_rewrite_sql($sql, $where);
}

function pmexpense_pm_rewrite_where_sql($query, $primary_table, $account) {
  static $conds = array();

  if (isset($conds[$primary_table][$account->uid])) {
    return $conds[$primary_table][$account->uid];
  }

  if (preg_match("/'pm_access'='pm_access'/", $query)) {
    $cond = '';
  }
  else {
    if (user_access('Project Management expense: view all', $account)) {
      return '';
    }

    $cond = '';
    if (user_access('Project Management expense: view own', $account)) {
      $cond .= "${primary_table}.uid=". $account->uid;
    }
    if (user_access('Project Management expense view of user organization', $account)) {
      if ($cond) {
        $cond .= ' OR ';
      }
      // If function is called without viewing an expense, this variable may not be set.
      // These lines check for that and set the organization node id to zero if not otherwise set.
      if (!isset($account->pmorganization_nid)) {
        $account->pmorganization_nid = 0;
      }
      $cond .= ' sex1.organization_nid='. $account->pmorganization_nid;
    }
    if ($cond) {
      $cond = " WHEN 'pmexpense' THEN (SELECT IF($cond,1,0) FROM {pmexpense} sex1 WHERE sex1.vid=${primary_table}.vid) ";
    }
    else {
      $cond = " WHEN 'pmexpense' THEN 0 ";
    }
  }

  $conds[$primary_table][$account->uid] = $cond;
  return $cond;
}

function pmexpense_menu() {
  $items = array();

  $items['pm/expenses'] = array(
    'title' => 'Expenses',
    'description' => 'Project Management expenses',
    'page callback' => 'pmexpense_list',
    'access arguments' => array('Project Management expense: access'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pmexpense.admin.inc',
    'weight' => 9,
  );

  $items['pm/expenses/report/%/%'] = array(
    'title' => 'Expenses',
    'description' => 'Project Management expenses',
    'page arguments' => array(3, 4),
    'page callback' => 'pmexpense_list_report',
    'access arguments' => array('Project Management expense: access'),
    'type' => MENU_CALLBACK,
    'file' => 'pmexpense.admin.inc',
  );

  $items['pm/expenses/provider_autocomplete'] = array(
    'title' => 'Provider autocomplete',
    'page callback' => 'pmexpense_autocomplete',
    'access arguments' => array('Project Management expense: access'),
    'type' => MENU_CALLBACK,
    'file' => 'pmexpense.admin.inc',
  );

  return $items;
}

function pmexpense_theme() {
  return array(
    'pmexpense_list' => array(
      'file'      => 'pmexpense.theme.inc',
      'arguments' => array('header', 'tasks', 'duration'),
    ),
    'pmexpense_view' => array(
      'file'      => 'pmexpense.theme.inc',
      'arguments' => array('node', 'teaser', 'page'),
    ),
    'pmexpense_list_form_report_reports' => array(
      'file'      => 'pmexpense.theme.inc',
    ),
    'pmexpense_list_report' => array(
      'file'      => 'pmexpense.theme.inc',
      'arguments' => array('report', 'language', 'timetrackings'),
    ),
  );
}

function pmexpense_node_info() {
  return array(
    'pmexpense' => array(
      'name' => t('Expense'),
      'base' => 'pmexpense',
      'description' => t("An expense for Project Management."),
      'title_label' => t("Title"),
      'body_label' => t("Description"),
    )
  );
}

function pmexpense_field_extra_fields() {
  $extra['node']['pmexpense'] = array(
    'form' => array(
      'group1' => array(
        'label' => 'Organization/Project/Task/Ticket Group',
        'weight' => -20,
      ),
      'group2' => array(
        'label' => 'Date/Provider Group',
        'weight' => -19,
      ),
      'group3' => array(
        'label' => 'Amount',
        'weight' => -18,
      ),
      'group4' => array(
        'label' => 'Tax Group',
        'weight' => -17,
      ),
    ),
  );
  return $extra;
}

function pmexpense_field_extra_fields_alter(&$info) {
  $info['node']['pmexpense']['form']['title']['weight'] = -16;
}

function pmexpense_pmorganization_change($organization_nid, $organization_title) {
  $s = "UPDATE {pmexpense} SET organization_title='%s' WHERE organization_nid=%d AND organization_title <> '%s'";
  db_query($s, $organization_title, $organization_nid, $organization_title);
}

function pmexpense_pmproject_change($project_nid, $project_title) {
  $s = "UPDATE {pmexpense} SET project_title='%s' WHERE project_nid=%d AND project_title <> '%s'";
  db_query($s, $project_title, $project_nid, $project_title);
}

function pmexpense_pmtask_change($task_nid, $task_title, $task_stepno) {
  $s = "UPDATE {pmexpense} SET task_title='%s', task_stepno='%s' WHERE task_nid=%d AND
      (task_title<>'%s' OR task_stepno<>'%s')";
  db_query($s, $task_title, $task_stepno, $task_nid, $task_title, $task_stepno);
}

function pmexpense_pmticket_change($ticket_nid, $ticket_title) {
  $s = "UPDATE {pmexpense} SET ticket_title='%s' WHERE ticket_nid=%d AND ticket_title <> '%s'";
  db_query($s, $ticket_title, $ticket_nid, $ticket_title);
}

function pmexpense_pmproject_change_hierarchy($project_nid, $organization_nid, $organization_title) {
  $query = db_update('pmexpense')
    ->fields(array(
      'organization_nid' => $organization_nid,
      'organization_title' => $organization_title,
    ))
    ->condition('project_nid', $project_nid)
    ->execute();

  $s = "UPDATE {pmexpense} SET organization_nid=%d, organization_title='%s' WHERE project_nid=%d";
  db_query($s, $organization_nid, $organization_title, $project_nid);
}

function pmexpense_pmtask_change_hierarchy($task_nid, $organization_nid, $organization_title, $project_nid, $project_title) {
  $query = db_update('pmexpense')
    ->fields(array(
      'organization_nid' => $organization_nid,
      'organization_title' => $organization_title,
      'project_nid' => $project_nid,
      'project_title' => $project_title,
    ))
    ->condition('task_nid', $task_nid)
    ->execute();
}

function pmexpense_pmticket_change_hierarchy($ticket_nid, $organization_nid, $organization_title, $project_nid, $project_title, $task_nid, $task_title) {
  $query = db_update('pmexpense')
    ->fields(array(
      'organization_nid' => $organization_nid,
      'organization_title' => $organization_title,
      'project_nid' => $project_nid,
      'project_title' => $project_title,
      'task_nid' => $task_nid,
      'task_title' => $task_title,
    ))
    ->condition('ticket_nid', $ticket_nid)
    ->execute();
}

function pmexpense_form($node, $form_state) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('Project Management'), 'pm');
  $breadcrumb[] = l(t('Expenses'), 'pm/expenses');
  drupal_set_breadcrumb($breadcrumb);

  if (arg(1)=='add') {
    if (array_key_exists('organization_nid', $_GET) && !$node->organization_nid) {
      $node->organization_nid = $_GET['organization_nid'];
    }
    if (array_key_exists('project_nid', $_GET) && !$node->project_nid) {
      $node->project_nid = $_GET['project_nid'];
      $p = node_load($node->project_nid);
      $node->organization_nid = $p->organization_nid;
      if (!pmorganization_access('view', $node->organization_nid)) {
        drupal_set_message(t("You cannot add an expense for this project, as you do not have access to view the organization's profile"));
        drupal_goto('node/'. $node->project_nid);
      }
    }
    if (array_key_exists('task_nid', $_GET) && !$node->task_nid) {
      $node->task_nid = $_GET['task_nid'];
      $t = node_load($node->task_nid);
      $node->organization_nid = $t->organization_nid;
      $node->project_nid = $t->project_nid;
      // $project_access deals with the case whereby the project could be blank, hence access rules not required
      $project_access = $node->project_nid ? pmproject_access('view', $node->project_nid) : TRUE;
      if (!pmorganization_access('view', $node->organization_nid) || !$project_access) {
        drupal_set_message(t("You cannot add an expense for this task, as you do not have access to view the both the organization and project's profile"));
        drupal_goto('node/'. $node->task_nid);
      }
    }
    if (array_key_exists('ticket_nid', $_GET) && !$node->ticket_nid) {
      $node->ticket_nid = $_GET['ticket_nid'];
      $t = node_load($node->ticket_nid);
      $node->organization_nid = $t->organization_nid;
      $node->project_nid = $t->project_nid;
      $node->task_nid = $t->task_nid;
      // $project_access deals with the case whereby the project could be blank, hence access rules not required
      $project_access = $node->project_nid ? pmproject('view', $node->project_nid) : TRUE;
      $task_access = $node->task_nid ? pmtask('view', $node->task_nid) : TRUE;
      if (!pmorganization_access('view', $node->organization_nid) || !project_access || !task_access) {
        drupal_set_message(t("You cannot add an expense for this ticket, as you do not have access to view all of the organization, project and task's profile"));
        drupal_goto('node/'. $node->ticket_nid);
      }
    }

    if (isset($_SESSION['pmexpense_list_filter']['organization_nid']) && (!isset($node->organization_nid))) {
      $node->organization_nid = $_SESSION['pmexpense_list_filter']['organization_nid'];
    }
    if (isset($_SESSION['pmexpense_list_filter']['project_nid']) && (!isset($node->project_nid))) {
      $node->project_nid = $_SESSION['pmexpense_list_filter']['project_nid'];
    }
    if (isset($_SESSION['pmexpense_list_filter']['task_nid']) && (!isset($node->task_nid))) {
      $node->task_nid = $_SESSION['pmexpense_list_filter']['task_nid'];
    }
    if (isset($_SESSION['pmexpense_list_filter']['ticket_nid']) && (!isset($node->ticket_nid))) {
      $node->ticket_nid = $_SESSION['pmexpense_list_filter']['ticket_nid'];
    }
    if (array_key_exists('organization_nid', $_GET)) $node->organization_nid = $_GET['organization_nid'];
    if (array_key_exists('project_nid', $_GET)) $node->project_nid = $_GET['project_nid'];
    if (array_key_exists('task_nid', $_GET)) $node->task_nid = $_GET['task_nid'];
    if (array_key_exists('ticket_nid', $_GET)) $node->ticket_nid = $_GET['ticket_nid'];

    // Load tax defaults
    $node->tax1app = variable_get('pm_tax1_app', 1);
    $node->tax1percent = variable_get('pm_tax1_percent', 20);
    $node->tax2app = variable_get('pm_tax2_app', 0);
    $node->tax2percent = variable_get('pm_tax2_percent', 20);
  }

  // Transition to compound tax - allow for nodes which may have been saved in the past without a tax percentage
  if ((arg(2) == 'edit') && ($node->tax1percent == NULL)) {
    $node->tax1percent = $node->tax1 / $node->amount * 100;
  }

  $type = node_type_get_type($node);
  $info = field_info_extra_fields('node', 'pmexpense', 'form');
  $w = -100;

  $form['#attributes']['class'] = 'pmcomponent_node_form';

  $form['group1'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group1']['weight'],
  );

  $query = db_select('node', 'n');
  $query->join('pmorganization', 'org', 'n.vid = org.vid');
  $query
    ->fields('n', array('nid', 'title'))
    ->condition('n.status', 1)
    ->condition('n.type', 'pmorganization')
    ->addTag('node_access')
    ->orderBy('title', 'ASC');

  if (arg(1) == 'add') {
    $query->condition('org.isactive', 1);
  }

  $result = $query->execute();

  $organizations = array();
  foreach ($result as $organization) {
    $organizations[$organization->nid] = $organization->title;
    if (!isset($node->organization_nid)) {
      $node->organization_nid = $organization->nid;
    }
  }
  $form['group1']['organization_nid'] = array(
    '#type' => 'select',
    '#title' => t('Organization'),
    '#default_value' => $node->organization_nid,
    '#options' => $organizations,
    '#required' => TRUE,
  );

  $s = "SELECT n.nid, n.title FROM {node} AS n INNER JOIN {pmproject} AS spr ON spr.vid=n.vid
  WHERE spr.organization_nid=%d AND n.status=1 AND n.type='pmproject' ORDER BY n.title";
//  $s = pmproject_access_sql($s);
//  $s = db_rewrite_sql($s);
//  $r = db_query($s, $node->organization_nid);
//  $projects = array();
//  while ($project = db_fetch_object($r)) {
//    $projects[$project->nid] = $project->title;
//  }
  $projects = array(0 => '-');// + $projects;
  $form['group1']['project_nid'] = array(
    '#type' => 'select',
    '#title' => t('Project'),
    '#default_value' => (isset($node->project_nid)) ? $node->project_nid : NULL,
    '#options' => $projects,
  );

  $tree = _pmtask_get_tree((isset($node->project_nid)) ? $node->project_nid : NULL);
  $tasks = _pmtask_plain_tree($tree);
  $tasks = array(0 => '-') + $tasks;
  $form['group1']['task_nid'] = array(
    '#type' => 'select',
    '#title' => t('Task'),
    '#default_value' => (isset($node->task_nid)) ? $node->task_nid : NULL,
    '#options' => (isset($tasks)) ? $tasks : NULL,
  );

  $tickets = array();
  $s = "SELECT n.nid, n.title FROM {node} AS n INNER JOIN {pmticket} AS sti ON sti.vid=n.vid WHERE n.status=1 AND n.type='pmticket'
  AND sti.organization_nid=%d AND sti.project_nid=%d AND sti.task_nid=%d ORDER BY n.title";
//  $s = pmticket_access_sql($s);
//  $s = db_rewrite_sql($s);
//  if (isset($node->organization_nid) && (isset($node->project_nid))) {
//    $r = db_query($s, $node->organization_nid, $node->project_nid, $node->task_nid);
//  }
//  while ($ticket = db_fetch_object($r)) {
//    $tickets[$ticket->nid] = $ticket->title;
//  }
  $form['group1']['ticket_nid'] = array(
    '#type' => 'select',
    '#title' => t('Ticket'),
    '#default_value' => (isset($node->ticket_nid)) ? $node->ticket_nid : NULL,
    '#options' => array(0 => '-'),// + $tickets,
  );

  $form['group2'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group2']['weight'],
  );

  $form['group2']['expensedate'] = array(
    '#type' => 'dateext',
    '#title' => t('Date'),
    '#default_value' => isset($node->expensedate) ? $node->expensedate : time(),
  );

  $form['group2']['provider_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Provider'),
    '#size' => 50,
    '#default_value' => (isset($node->provider_title)) ? $node->provider_title : NULL,
    '#autocomplete_path' => 'pm/expenses/provider_autocomplete',
  );

  $form['group3'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group3']['weight'],
  );

  $form['group3']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => (isset($node->amount)) ? $node->amount : NULL,
    '#size' => 15,
  );

  $form['group4'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group4']['weight'],
  );

  $form['group4']['tax1app'] = array(
    '#type' => 'select',
    '#title' => t('Tax 1 Application'),
    '#options' => array(
      1 => t('Apply to item amount'),
      0 => t('Do not apply tax'),
    ),
    '#default_value' => $node->tax1app,
  );

  $form['group4']['tax1percent'] = array(
    '#type' => 'textfield',
    '#title' => t('Tax 1 Percentage'),
    '#default_value' => $node->tax1percent,
    '#size' => 20,
  );

  $form['group4']['tax2app'] = array(
    '#type' => 'select',
    '#title' => t('Tax 2 Application'),
    '#options' => array(
      2 => t('Apply to total of item amount plus previous tax'),
      1 => t('Apply to item amount'),
      0 => t('Do not apply tax'),
    ),
    '#default_value' => $node->tax2app,
  );

  $form['group4']['tax2percent'] = array(
    '#type' => 'textfield',
    '#title' => t('Tax 2 Percentage'),
    '#default_value' => $node->tax2percent,
    '#size' => 20,
  );

  if (!variable_get('pm_tax_display', TRUE)) {
    $form['group4']['#type'] = 'hidden';
  }
  if (!variable_get('pm_tax2_display', TRUE)) {
    $form['group4']['tax2app']['#type'] = 'hidden';
    $form['group4']['tax2percent']['#type'] = 'hidden';
  }

  $form['taxnotes'] = array(
    '#type' => 'markup',
    '#value' => t('Totals will be calculated automatically according to your tax selections.'),
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'group4') : -17,
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => $info['title']['weight'],
  );

  // Check to see if the body field is still there, if so, display it.
  $body = field_get_items('pmexpense',$node,'body');
  if ($body) {
    $form['body_field'] = $body;
  }

  return $form;
}

// NODE MANIPULATION FUNCTIONS
function pmexpense_insert($node) {
  _pmexpense_beforesave($node);

  db_query("INSERT INTO {pmexpense}
    (vid, nid, organization_nid, organization_title, project_nid, project_title,
    task_nid, task_title, task_stepno, ticket_nid, ticket_title,
    provider_nid, provider_title, expensedate, amount, tax1app, tax1percent,
    tax1, subtotal, tax2app, tax2percent, tax2, total) VALUES
    (%d, %d, %d, '%s', %d, '%s',
    %d, '%s', '%s', %d, '%s',
    %d, '%s', %d, %f, %d, %f,
    %f, %f, %d, %f, %f, %f)",
    $node->vid, $node->nid, $node->organization_nid, $node->organization_title, $node->project_nid, (isset($node->project_title)) ? $node->project_title : NULL,
    (isset($node->task_nid)) ? $node->task_nid : NULL, (isset($node->task_title)) ? $node->task_title : NULL, (isset($node->task_stepno)) ? $node->task_stepno : NULL, $node->ticket_nid, (isset($node->ticket_title)) ? $node->ticket_title : NULL,
    (isset($node->provider_nid)) ? $node->provider_nid : NULL, $node->provider_title, $node->expensedate, $node->amount, $node->tax1app, $node->tax1percent,
    $node->tax1, $node->subtotal, $node->tax2app, $node->tax2percent, $node->tax2, $node->total);
}

function pmexpense_update($node) {
  _pmexpense_beforesave($node);

  if ($node->revision) {
    pmexpense_insert($node);
  }
  else {
    db_query("UPDATE {pmexpense} SET
      organization_nid=%d, organization_title='%s', project_nid=%d, project_title='%s',
      task_nid=%d, task_title='%s', task_stepno='%s', ticket_nid=%d, ticket_title='%s',
      provider_nid=%d, provider_title='%s', expensedate=%d, amount=%f, tax1app=%d, tax1percent=%f,
      tax1=%f, subtotal=%f, tax2app=%d, tax2percent=%f, tax2=%f, total=%f WHERE vid = %d",
      $node->organization_nid, $node->organization_title, $node->project_nid, $node->project_title,
      $node->task_nid, $node->task_title, $node->task_stepno, $node->ticket_nid, $node->ticket_title,
      $node->provider_nid, $node->provider_title, $node->expensedate, $node->amount, $node->tax1app, $node->tax1percent,
      $node->tax1, $node->subtotal, $node->tax2app, $node->tax2percent, $node->tax2, $node->total, $node->vid);
  }
}

function _pmexpense_beforesave(&$node) {
  // Allow use of comma when inputting numerical values - str_replace with period decimal
  $node->amount = str_replace(',', '.', $node->amount);
  $node->tax1percent = str_replace(',', '.', $node->tax1percent);
  $node->tax2percent = str_replace(',', '.', $node->tax2percent);

  $node->expensedate = _pm_date_to_gmtimestamp($node->expensedate);

  pm_taxation($node);

  $s = "SELECT n.title FROM {node} AS n
    INNER JOIN {pmorganization} AS o ON n.nid=o.nid
    WHERE type='pmorganization' AND n.nid=%d";
  $r = db_query($s, $node->organization_nid);
  $o = db_fetch_object($r);
  $o ? $node->organization_title = $o->title : NULL;

  $s = "SELECT n.title, p.organization_title
    FROM {node} n INNER JOIN {pmproject} p ON n.nid=p.nid
    WHERE type='pmproject' AND n.nid=%d";
  $r = db_query($s, $node->project_nid);
  $p = db_fetch_object($r);
  $p ? $node->project_title = $p->title : NULL;

  $s = "SELECT title, stepno FROM {node} AS n INNER JOIN {pmtask} AS t ON n.vid=t.vid WHERE n.type='pmtask' AND n.nid=%d";
  (isset($node->task_nid)) ? $r = db_query($s, $node->task_nid) : NULL;
  $ta = db_fetch_object($r);
  (isset($ta->title)) ? $node->task_title = $ta->title : NULL;
  (isset($ta->stepno)) ? $node->task_stepno = $ta->stepno : NULL;

  $s = "SELECT title FROM {node} AS n INNER JOIN {pmticket} AS t ON n.vid=t.vid WHERE n.type='pmticket' AND n.nid=%d";
  (isset($node->ticket_nid)) ? $r = db_query($s, $node->ticket_nid) : NULL;

  $ti = db_fetch_object($r);
  (isset($ti->title)) ? $node->ticket_title = $ti->title : NULL;
}

function pmexpense_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {pmexpense} WHERE vid = %d', $node->vid);
      break;
  }
}

function pmexpense_delete($node) {
  db_query('DELETE FROM {pmexpense} WHERE nid = %d', $node->nid);
}

function pmexpense_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {pmexpense} WHERE vid = %d', $node->vid));
  return $additions;
}

function pmexpense_view($node, $teaser = FALSE, $page = FALSE) {
  return theme('pmexpense_view', $node, $teaser, $page);
}

// INVOICE AUTO ADD HANDLER
function pmexpense_pminvoice_auto_add($node, $invoice_nid = NULL) {
  if (!module_exists('pminvoice')) {
    drupal_set_message(t('This function should only be called from within Project Management Invoice'));
    return;
  }
  else {
    global $user;

    if (!$invoice_nid) {

      $new_invoice = new StdClass;

      // Code copied with edits from node form
      $new_invoice->requestdate = time();
      $new_invoice->duedate = $new_invoice->requestdate + (variable_get('pminvoice_payment_days', 30) * 86400);
      $s = "SELECT MAX(CAST(SUBSTRING_INDEX(sin.number, '/', 1) AS SIGNED)) FROM {node} n INNER JOIN {pminvoice} sin ON n.nid=sin.nid
        WHERE n.type='pminvoice' AND YEAR(FROM_UNIXTIME(sin.requestdate))=YEAR(FROM_UNIXTIME(%d))";
      $date = getdate($new_invoice->requestdate);
      $new_invoice->number = (db_result(db_query($s, $new_invoice->requestdate)) + 1) .'/'. $date['year'];

      $new_invoice->title = $node->title;
      $new_invoice->uid = $user->uid;
      $new_invoice->type = 'pminvoice';
      // $new_invoice->reference
      $new_invoice->organization_nid = $node->organization_nid;
      $new_invoice->organization_title = $node->organization_title;
      $new_invoice->project_nid = $node->project_nid;
      $new_invoice->project_title = $node->project_title;
      // $new_invoice->amount
      // $new_invoice->tax
      // $new_invoice->total
      // $new_invoice->totalcustomercurr
      // $new_invoice->taxexempt
      $new_invoice->src_nid = $node->nid;
      $new_invoice->src_vid = $node->vid;

      node_save($new_invoice);
      $invoice_nid = $new_invoice->nid;
    }
    else {
      $new_invoice = node_load($invoice_nid);
    }

    if ($node->ticket_nid) {
      $parent_ticket = node_load($node->ticket_nid);
    }
    elseif ($node->task_nid) {
      $parent_task = node_load($node->task_nid);
    }
    elseif ($node->project_nid) {
      $parent_project = node_load($node->project_nid);
    }
    else {
      $parent_organization = node_load($node->organization_nid);
    }

    $count = count($new_invoice->items);

    $new_invoice->items[$count]->description = $node->title;
    $new_invoice->items[$count]->amount = $node->amount;
    // Tax percent uses the values set on the expense.
    $new_invoice->items[$count]->tax1app = $node->tax1app;
    $new_invoice->items[$count]->tax1percent = $node->tax1percent;
    $new_invoice->items[$count]->tax1 = $node-> tax1;
    $new_invoice->items[$count]->tax2app = $node->tax2app;
    $new_invoice->items[$count]->tax2percent = $node->tax2percent;
    $new_invoice->items[$count]->tax2 = $node->tax2;
    $new_invoice->items[$count]->total = $node->total;
    $new_invoice->items[$count]->src_nid = $node->nid;
    $new_invoice->items[$count]->src_vid = $node->vid;

    // pm_taxation($new_invoice->items[$count]);
    pminvoice_update($new_invoice);
  }
  return $invoice_nid;
}


function pmexpense_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'pmexpense'),
  );
}

function pmexpense_pm_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'pm_dashboard_link',
      'title' => t('Expenses'),
      'icon' => 'pmexpenses',
      'path' => 'pm/expenses',
      'params' => array(),
      'access_arguments' => 'Project Management expense: access',
      'node_type' => 'pmexpense',
      'add_type' => 'pmexpense',
      'map' => array(),
      'weight' => 11,
    );
  }
  return $links;
}
